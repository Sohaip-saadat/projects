
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000107c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080011ac  080011ac  000111ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011c4  080011c4  000111cc  2**0
                  CONTENTS
  4 .ARM          00000000  080011c4  080011c4  000111cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011c4  080011cc  000111cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011c4  080011c4  000111c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011c8  080011c8  000111c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000111cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000000  080011cc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  080011cc  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000111cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001e5b  00000000  00000000  000111f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008e6  00000000  00000000  00013050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000d7a  00000000  00000000  00013936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000230  00000000  00000000  000146b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001c8  00000000  00000000  000148e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f10  00000000  00000000  00014aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003156  00000000  00000000  000159b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a644  00000000  00000000  00018b0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00023152  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000700  00000000  00000000  000231a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08001194 	.word	0x08001194

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08001194 	.word	0x08001194

08000170 <main>:
 void USART1_CallBack(void);
 void SPI1_CallBack(struct S_IRQ_SRC IRQ_src);

/* =========== Main Program ========== */
int main()
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b08e      	sub	sp, #56	; 0x38
 8000174:	af00      	add	r7, sp, #0
	/* Configuration of SS */
	GPIO_PIN_CONFIG_T SS_Config;
	/* Initialization */
	Clock_Init();
 8000176:	f000 f83f 	bl	80001f8 <Clock_Init>

	/* Configuration of USART1 */
	USART_Config_t USART1_Config;

	USART1_Config.BaudRate = UART_BaudRate_115200;
 800017a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800017e:	623b      	str	r3, [r7, #32]
	USART1_Config.HwFlowCtl = UART_HwFlowCtl_NONE;
 8000180:	2300      	movs	r3, #0
 8000182:	857b      	strh	r3, [r7, #42]	; 0x2a
	USART1_Config.IRQ_Enable = UART_IRQ_Enable_RXNEIE;
 8000184:	2320      	movs	r3, #32
 8000186:	85bb      	strh	r3, [r7, #44]	; 0x2c
	USART1_Config.P_IRQ_CallBack = USART1_CallBack;
 8000188:	4b17      	ldr	r3, [pc, #92]	; (80001e8 <main+0x78>)
 800018a:	633b      	str	r3, [r7, #48]	; 0x30
	USART1_Config.Parity = UART_Parity_NONE;
 800018c:	2300      	movs	r3, #0
 800018e:	84fb      	strh	r3, [r7, #38]	; 0x26
	USART1_Config.Payload_Length = UART_Payload_Length_8B;
 8000190:	2300      	movs	r3, #0
 8000192:	84bb      	strh	r3, [r7, #36]	; 0x24
	USART1_Config.StopBits = UART_StopBits_1;
 8000194:	2300      	movs	r3, #0
 8000196:	853b      	strh	r3, [r7, #40]	; 0x28
	USART1_Config.USART_Mode = UART_Mode_TX_RX;
 8000198:	230c      	movs	r3, #12
 800019a:	83bb      	strh	r3, [r7, #28]

	MCAL_UART_Init(USART1, &USART1_Config);
 800019c:	f107 031c 	add.w	r3, r7, #28
 80001a0:	4619      	mov	r1, r3
 80001a2:	4812      	ldr	r0, [pc, #72]	; (80001ec <main+0x7c>)
 80001a4:	f000 fd82 	bl	8000cac <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 80001a8:	4810      	ldr	r0, [pc, #64]	; (80001ec <main+0x7c>)
 80001aa:	f000 feb9 	bl	8000f20 <MCAL_UART_GPIO_Set_Pins>

	/* Configuration of SPI1 */
	SPI_Config_t SPI1_Config;

	/* Common Configuration */
	SPI1_Config.BaudRate_Prescaler = BAUDERATE_PRESCALER_8;
 80001ae:	2310      	movs	r3, #16
 80001b0:	827b      	strh	r3, [r7, #18]
	SPI1_Config.CLK_Phase = CLK_PHASE_SECOND;
 80001b2:	2301      	movs	r3, #1
 80001b4:	81fb      	strh	r3, [r7, #14]
	SPI1_Config.CLK_Polarity = CLK_POLARITY_IDLE_HIGH;
 80001b6:	2302      	movs	r3, #2
 80001b8:	81bb      	strh	r3, [r7, #12]
	SPI1_Config.Frame_Format = FRAME_FORMAT_MSB_FIRST;
 80001ba:	2300      	movs	r3, #0
 80001bc:	813b      	strh	r3, [r7, #8]
	SPI1_Config.Frame_Size = FRAME_SIZE_8BIT;
 80001be:	2300      	movs	r3, #0
 80001c0:	817b      	strh	r3, [r7, #10]
		SPI1_Config.NSS = NSS_SW_SSI_SET;

#endif

#ifdef MCU_Act_As_Slave
	SPI1_Config.Communication_Mode= COMMUNICATION_MODE_2LINE_FULL_DUPLEX;
 80001c2:	2300      	movs	r3, #0
 80001c4:	80fb      	strh	r3, [r7, #6]
	SPI1_Config.SPI_Mode = SPI_MODE_SLAVE;
 80001c6:	2300      	movs	r3, #0
 80001c8:	80bb      	strh	r3, [r7, #4]
	SPI1_Config.IRQ_Enable = IRQ_ENABLE_RXNEIE;
 80001ca:	2340      	movs	r3, #64	; 0x40
 80001cc:	82bb      	strh	r3, [r7, #20]
	SPI1_Config.NSS = NSS_HW_SLAVE;
 80001ce:	2300      	movs	r3, #0
 80001d0:	823b      	strh	r3, [r7, #16]
	SPI1_Config.P_IRQ_CallBack = SPI1_CallBack;
 80001d2:	4b07      	ldr	r3, [pc, #28]	; (80001f0 <main+0x80>)
 80001d4:	61bb      	str	r3, [r7, #24]
#endif



	MCAL_SPI_Init(SPI1, &SPI1_Config);
 80001d6:	1d3b      	adds	r3, r7, #4
 80001d8:	4619      	mov	r1, r3
 80001da:	4806      	ldr	r0, [pc, #24]	; (80001f4 <main+0x84>)
 80001dc:	f000 fb18 	bl	8000810 <MCAL_SPI_Init>
	MCAL_SPI_GPIO_Set_Pins(SPI1);
 80001e0:	4804      	ldr	r0, [pc, #16]	; (80001f4 <main+0x84>)
 80001e2:	f000 fbc7 	bl	8000974 <MCAL_SPI_GPIO_Set_Pins>
	/* Force the slave select (High) idle mode */
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
#endif

	/* Loop For Ever */
	while(1){}
 80001e6:	e7fe      	b.n	80001e6 <main+0x76>
 80001e8:	0800022d 	.word	0x0800022d
 80001ec:	40013800 	.word	0x40013800
 80001f0:	08000239 	.word	0x08000239
 80001f4:	40013000 	.word	0x40013000

080001f8 <Clock_Init>:
}

/* ======== clock Initialize definition ======= */
void Clock_Init(void)
{
 80001f8:	b480      	push	{r7}
 80001fa:	af00      	add	r7, sp, #0
	/* Enable clock GPIOA */
	RCC_GPIOA_CLK_EN();
 80001fc:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <Clock_Init+0x30>)
 80001fe:	699b      	ldr	r3, [r3, #24]
 8000200:	4a09      	ldr	r2, [pc, #36]	; (8000228 <Clock_Init+0x30>)
 8000202:	f043 0304 	orr.w	r3, r3, #4
 8000206:	6193      	str	r3, [r2, #24]

	/* Enable clock GPIOB */
	RCC_GPIOB_CLK_EN();
 8000208:	4b07      	ldr	r3, [pc, #28]	; (8000228 <Clock_Init+0x30>)
 800020a:	699b      	ldr	r3, [r3, #24]
 800020c:	4a06      	ldr	r2, [pc, #24]	; (8000228 <Clock_Init+0x30>)
 800020e:	f043 0308 	orr.w	r3, r3, #8
 8000212:	6193      	str	r3, [r2, #24]

	/* Enable Clock For AFIO */
	RCC_AFIO_CLK_EN();
 8000214:	4b04      	ldr	r3, [pc, #16]	; (8000228 <Clock_Init+0x30>)
 8000216:	699b      	ldr	r3, [r3, #24]
 8000218:	4a03      	ldr	r2, [pc, #12]	; (8000228 <Clock_Init+0x30>)
 800021a:	f043 0301 	orr.w	r3, r3, #1
 800021e:	6193      	str	r3, [r2, #24]
}
 8000220:	bf00      	nop
 8000222:	46bd      	mov	sp, r7
 8000224:	bc80      	pop	{r7}
 8000226:	4770      	bx	lr
 8000228:	40021000 	.word	0x40021000

0800022c <USART1_CallBack>:



void USART1_CallBack(void)
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0

	MCAL_SPI_TX_RX(SPI1, &data, SPI_enable);

	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
#endif
}
 8000230:	bf00      	nop
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr

08000238 <SPI1_CallBack>:

void SPI1_CallBack(struct S_IRQ_SRC IRQ_src)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
 800023e:	7138      	strb	r0, [r7, #4]
#ifdef MCU_Act_As_Slave
	if(IRQ_src.RXNE)
 8000240:	793b      	ldrb	r3, [r7, #4]
 8000242:	f003 0302 	and.w	r3, r3, #2
 8000246:	b2db      	uxtb	r3, r3
 8000248:	2b00      	cmp	r3, #0
 800024a:	d00c      	beq.n	8000266 <SPI1_CallBack+0x2e>
	{
		data = 0xf;
 800024c:	4b08      	ldr	r3, [pc, #32]	; (8000270 <SPI1_CallBack+0x38>)
 800024e:	220f      	movs	r2, #15
 8000250:	801a      	strh	r2, [r3, #0]
		MCAL_SPI_TX_RX(SPI1, &data, SPI_disable);
 8000252:	2200      	movs	r2, #0
 8000254:	4906      	ldr	r1, [pc, #24]	; (8000270 <SPI1_CallBack+0x38>)
 8000256:	4807      	ldr	r0, [pc, #28]	; (8000274 <SPI1_CallBack+0x3c>)
 8000258:	f000 fca2 	bl	8000ba0 <MCAL_SPI_TX_RX>

		MCAL_UART_SendData(USART1, &data, USART_enable);
 800025c:	2201      	movs	r2, #1
 800025e:	4904      	ldr	r1, [pc, #16]	; (8000270 <SPI1_CallBack+0x38>)
 8000260:	4805      	ldr	r0, [pc, #20]	; (8000278 <SPI1_CallBack+0x40>)
 8000262:	f000 fdeb 	bl	8000e3c <MCAL_UART_SendData>
	}
#endif
}
 8000266:	bf00      	nop
 8000268:	3708      	adds	r7, #8
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	2000001c 	.word	0x2000001c
 8000274:	40013000 	.word	0x40013000
 8000278:	40013800 	.word	0x40013800

0800027c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800027c:	480d      	ldr	r0, [pc, #52]	; (80002b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800027e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000280:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000284:	480c      	ldr	r0, [pc, #48]	; (80002b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000286:	490d      	ldr	r1, [pc, #52]	; (80002bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000288:	4a0d      	ldr	r2, [pc, #52]	; (80002c0 <LoopForever+0xe>)
  movs r3, #0
 800028a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800028c:	e002      	b.n	8000294 <LoopCopyDataInit>

0800028e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800028e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000292:	3304      	adds	r3, #4

08000294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000298:	d3f9      	bcc.n	800028e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800029a:	4a0a      	ldr	r2, [pc, #40]	; (80002c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800029c:	4c0a      	ldr	r4, [pc, #40]	; (80002c8 <LoopForever+0x16>)
  movs r3, #0
 800029e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002a0:	e001      	b.n	80002a6 <LoopFillZerobss>

080002a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002a4:	3204      	adds	r2, #4

080002a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a8:	d3fb      	bcc.n	80002a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002aa:	f000 ff4f 	bl	800114c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ae:	f7ff ff5f 	bl	8000170 <main>

080002b2 <LoopForever>:

LoopForever:
  b LoopForever
 80002b2:	e7fe      	b.n	80002b2 <LoopForever>
  ldr   r0, =_estack
 80002b4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002bc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002c0:	080011cc 	.word	0x080011cc
  ldr r2, =_sbss
 80002c4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002c8:	200000a0 	.word	0x200000a0

080002cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002cc:	e7fe      	b.n	80002cc <ADC1_2_IRQHandler>
	...

080002d0 <EXTI0_IRQHandler>:
1: selected trigger request occurred
This bit is set when the selected edge event arrives on the external interrupt line. This bit is
cleared by writing a ‘1’ into the bit.*/

void EXTI0_IRQHandler(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	//clear pending flag
	EXTI->PR |= 1<<0;
 80002d4:	4b05      	ldr	r3, [pc, #20]	; (80002ec <EXTI0_IRQHandler+0x1c>)
 80002d6:	695b      	ldr	r3, [r3, #20]
 80002d8:	4a04      	ldr	r2, [pc, #16]	; (80002ec <EXTI0_IRQHandler+0x1c>)
 80002da:	f043 0301 	orr.w	r3, r3, #1
 80002de:	6153      	str	r3, [r2, #20]
	GP_IRQ_callBack[0]();
 80002e0:	4b03      	ldr	r3, [pc, #12]	; (80002f0 <EXTI0_IRQHandler+0x20>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4798      	blx	r3
}
 80002e6:	bf00      	nop
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	40010400 	.word	0x40010400
 80002f0:	20000020 	.word	0x20000020

080002f4 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<1;
 80002f8:	4b05      	ldr	r3, [pc, #20]	; (8000310 <EXTI1_IRQHandler+0x1c>)
 80002fa:	695b      	ldr	r3, [r3, #20]
 80002fc:	4a04      	ldr	r2, [pc, #16]	; (8000310 <EXTI1_IRQHandler+0x1c>)
 80002fe:	f043 0302 	orr.w	r3, r3, #2
 8000302:	6153      	str	r3, [r2, #20]
	GP_IRQ_callBack[1]();
 8000304:	4b03      	ldr	r3, [pc, #12]	; (8000314 <EXTI1_IRQHandler+0x20>)
 8000306:	685b      	ldr	r3, [r3, #4]
 8000308:	4798      	blx	r3
}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	40010400 	.word	0x40010400
 8000314:	20000020 	.word	0x20000020

08000318 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<2;
 800031c:	4b05      	ldr	r3, [pc, #20]	; (8000334 <EXTI2_IRQHandler+0x1c>)
 800031e:	695b      	ldr	r3, [r3, #20]
 8000320:	4a04      	ldr	r2, [pc, #16]	; (8000334 <EXTI2_IRQHandler+0x1c>)
 8000322:	f043 0304 	orr.w	r3, r3, #4
 8000326:	6153      	str	r3, [r2, #20]
	GP_IRQ_callBack[2]();
 8000328:	4b03      	ldr	r3, [pc, #12]	; (8000338 <EXTI2_IRQHandler+0x20>)
 800032a:	689b      	ldr	r3, [r3, #8]
 800032c:	4798      	blx	r3
}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	40010400 	.word	0x40010400
 8000338:	20000020 	.word	0x20000020

0800033c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<3;
 8000340:	4b05      	ldr	r3, [pc, #20]	; (8000358 <EXTI3_IRQHandler+0x1c>)
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	4a04      	ldr	r2, [pc, #16]	; (8000358 <EXTI3_IRQHandler+0x1c>)
 8000346:	f043 0308 	orr.w	r3, r3, #8
 800034a:	6153      	str	r3, [r2, #20]
	GP_IRQ_callBack[3]();
 800034c:	4b03      	ldr	r3, [pc, #12]	; (800035c <EXTI3_IRQHandler+0x20>)
 800034e:	68db      	ldr	r3, [r3, #12]
 8000350:	4798      	blx	r3

}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40010400 	.word	0x40010400
 800035c:	20000020 	.word	0x20000020

08000360 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<4;
 8000364:	4b05      	ldr	r3, [pc, #20]	; (800037c <EXTI4_IRQHandler+0x1c>)
 8000366:	695b      	ldr	r3, [r3, #20]
 8000368:	4a04      	ldr	r2, [pc, #16]	; (800037c <EXTI4_IRQHandler+0x1c>)
 800036a:	f043 0310 	orr.w	r3, r3, #16
 800036e:	6153      	str	r3, [r2, #20]
	GP_IRQ_callBack[4]();
 8000370:	4b03      	ldr	r3, [pc, #12]	; (8000380 <EXTI4_IRQHandler+0x20>)
 8000372:	691b      	ldr	r3, [r3, #16]
 8000374:	4798      	blx	r3
}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	40010400 	.word	0x40010400
 8000380:	20000020 	.word	0x20000020

08000384 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5) {EXTI->PR |= 1<<5; GP_IRQ_callBack[5]();}
 8000388:	4b26      	ldr	r3, [pc, #152]	; (8000424 <EXTI9_5_IRQHandler+0xa0>)
 800038a:	695b      	ldr	r3, [r3, #20]
 800038c:	f003 0320 	and.w	r3, r3, #32
 8000390:	2b00      	cmp	r3, #0
 8000392:	d008      	beq.n	80003a6 <EXTI9_5_IRQHandler+0x22>
 8000394:	4b23      	ldr	r3, [pc, #140]	; (8000424 <EXTI9_5_IRQHandler+0xa0>)
 8000396:	695b      	ldr	r3, [r3, #20]
 8000398:	4a22      	ldr	r2, [pc, #136]	; (8000424 <EXTI9_5_IRQHandler+0xa0>)
 800039a:	f043 0320 	orr.w	r3, r3, #32
 800039e:	6153      	str	r3, [r2, #20]
 80003a0:	4b21      	ldr	r3, [pc, #132]	; (8000428 <EXTI9_5_IRQHandler+0xa4>)
 80003a2:	695b      	ldr	r3, [r3, #20]
 80003a4:	4798      	blx	r3
	if(EXTI->PR & 1<<6) {EXTI->PR |= 1<<6; GP_IRQ_callBack[6]();}
 80003a6:	4b1f      	ldr	r3, [pc, #124]	; (8000424 <EXTI9_5_IRQHandler+0xa0>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d008      	beq.n	80003c4 <EXTI9_5_IRQHandler+0x40>
 80003b2:	4b1c      	ldr	r3, [pc, #112]	; (8000424 <EXTI9_5_IRQHandler+0xa0>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	4a1b      	ldr	r2, [pc, #108]	; (8000424 <EXTI9_5_IRQHandler+0xa0>)
 80003b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003bc:	6153      	str	r3, [r2, #20]
 80003be:	4b1a      	ldr	r3, [pc, #104]	; (8000428 <EXTI9_5_IRQHandler+0xa4>)
 80003c0:	699b      	ldr	r3, [r3, #24]
 80003c2:	4798      	blx	r3
	if(EXTI->PR & 1<<7) {EXTI->PR |= 1<<7; GP_IRQ_callBack[7]();}
 80003c4:	4b17      	ldr	r3, [pc, #92]	; (8000424 <EXTI9_5_IRQHandler+0xa0>)
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d008      	beq.n	80003e2 <EXTI9_5_IRQHandler+0x5e>
 80003d0:	4b14      	ldr	r3, [pc, #80]	; (8000424 <EXTI9_5_IRQHandler+0xa0>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	4a13      	ldr	r2, [pc, #76]	; (8000424 <EXTI9_5_IRQHandler+0xa0>)
 80003d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003da:	6153      	str	r3, [r2, #20]
 80003dc:	4b12      	ldr	r3, [pc, #72]	; (8000428 <EXTI9_5_IRQHandler+0xa4>)
 80003de:	69db      	ldr	r3, [r3, #28]
 80003e0:	4798      	blx	r3
	if(EXTI->PR & 1<<8) {EXTI->PR |= 1<<8; GP_IRQ_callBack[8]();}
 80003e2:	4b10      	ldr	r3, [pc, #64]	; (8000424 <EXTI9_5_IRQHandler+0xa0>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d008      	beq.n	8000400 <EXTI9_5_IRQHandler+0x7c>
 80003ee:	4b0d      	ldr	r3, [pc, #52]	; (8000424 <EXTI9_5_IRQHandler+0xa0>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	4a0c      	ldr	r2, [pc, #48]	; (8000424 <EXTI9_5_IRQHandler+0xa0>)
 80003f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003f8:	6153      	str	r3, [r2, #20]
 80003fa:	4b0b      	ldr	r3, [pc, #44]	; (8000428 <EXTI9_5_IRQHandler+0xa4>)
 80003fc:	6a1b      	ldr	r3, [r3, #32]
 80003fe:	4798      	blx	r3
	if(EXTI->PR & 1<<9) {EXTI->PR |= 1<<9; GP_IRQ_callBack[9]();}
 8000400:	4b08      	ldr	r3, [pc, #32]	; (8000424 <EXTI9_5_IRQHandler+0xa0>)
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000408:	2b00      	cmp	r3, #0
 800040a:	d008      	beq.n	800041e <EXTI9_5_IRQHandler+0x9a>
 800040c:	4b05      	ldr	r3, [pc, #20]	; (8000424 <EXTI9_5_IRQHandler+0xa0>)
 800040e:	695b      	ldr	r3, [r3, #20]
 8000410:	4a04      	ldr	r2, [pc, #16]	; (8000424 <EXTI9_5_IRQHandler+0xa0>)
 8000412:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000416:	6153      	str	r3, [r2, #20]
 8000418:	4b03      	ldr	r3, [pc, #12]	; (8000428 <EXTI9_5_IRQHandler+0xa4>)
 800041a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800041c:	4798      	blx	r3

}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	40010400 	.word	0x40010400
 8000428:	20000020 	.word	0x20000020

0800042c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10) {EXTI->PR |= 1<<10; GP_IRQ_callBack[10]();}
 8000430:	4b2d      	ldr	r3, [pc, #180]	; (80004e8 <EXTI15_10_IRQHandler+0xbc>)
 8000432:	695b      	ldr	r3, [r3, #20]
 8000434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000438:	2b00      	cmp	r3, #0
 800043a:	d008      	beq.n	800044e <EXTI15_10_IRQHandler+0x22>
 800043c:	4b2a      	ldr	r3, [pc, #168]	; (80004e8 <EXTI15_10_IRQHandler+0xbc>)
 800043e:	695b      	ldr	r3, [r3, #20]
 8000440:	4a29      	ldr	r2, [pc, #164]	; (80004e8 <EXTI15_10_IRQHandler+0xbc>)
 8000442:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000446:	6153      	str	r3, [r2, #20]
 8000448:	4b28      	ldr	r3, [pc, #160]	; (80004ec <EXTI15_10_IRQHandler+0xc0>)
 800044a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800044c:	4798      	blx	r3
	if(EXTI->PR & 1<<11) {EXTI->PR |= 1<<11; GP_IRQ_callBack[11]();}
 800044e:	4b26      	ldr	r3, [pc, #152]	; (80004e8 <EXTI15_10_IRQHandler+0xbc>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000456:	2b00      	cmp	r3, #0
 8000458:	d008      	beq.n	800046c <EXTI15_10_IRQHandler+0x40>
 800045a:	4b23      	ldr	r3, [pc, #140]	; (80004e8 <EXTI15_10_IRQHandler+0xbc>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	4a22      	ldr	r2, [pc, #136]	; (80004e8 <EXTI15_10_IRQHandler+0xbc>)
 8000460:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000464:	6153      	str	r3, [r2, #20]
 8000466:	4b21      	ldr	r3, [pc, #132]	; (80004ec <EXTI15_10_IRQHandler+0xc0>)
 8000468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800046a:	4798      	blx	r3
	if(EXTI->PR & 1<<12) {EXTI->PR |= 1<<12; GP_IRQ_callBack[12]();}
 800046c:	4b1e      	ldr	r3, [pc, #120]	; (80004e8 <EXTI15_10_IRQHandler+0xbc>)
 800046e:	695b      	ldr	r3, [r3, #20]
 8000470:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000474:	2b00      	cmp	r3, #0
 8000476:	d008      	beq.n	800048a <EXTI15_10_IRQHandler+0x5e>
 8000478:	4b1b      	ldr	r3, [pc, #108]	; (80004e8 <EXTI15_10_IRQHandler+0xbc>)
 800047a:	695b      	ldr	r3, [r3, #20]
 800047c:	4a1a      	ldr	r2, [pc, #104]	; (80004e8 <EXTI15_10_IRQHandler+0xbc>)
 800047e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000482:	6153      	str	r3, [r2, #20]
 8000484:	4b19      	ldr	r3, [pc, #100]	; (80004ec <EXTI15_10_IRQHandler+0xc0>)
 8000486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000488:	4798      	blx	r3
	if(EXTI->PR & 1<<13) {EXTI->PR |= 1<<13; GP_IRQ_callBack[13]();}
 800048a:	4b17      	ldr	r3, [pc, #92]	; (80004e8 <EXTI15_10_IRQHandler+0xbc>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000492:	2b00      	cmp	r3, #0
 8000494:	d008      	beq.n	80004a8 <EXTI15_10_IRQHandler+0x7c>
 8000496:	4b14      	ldr	r3, [pc, #80]	; (80004e8 <EXTI15_10_IRQHandler+0xbc>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	4a13      	ldr	r2, [pc, #76]	; (80004e8 <EXTI15_10_IRQHandler+0xbc>)
 800049c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004a0:	6153      	str	r3, [r2, #20]
 80004a2:	4b12      	ldr	r3, [pc, #72]	; (80004ec <EXTI15_10_IRQHandler+0xc0>)
 80004a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004a6:	4798      	blx	r3
	if(EXTI->PR & 1<<14) {EXTI->PR |= 1<<14; GP_IRQ_callBack[14]();}
 80004a8:	4b0f      	ldr	r3, [pc, #60]	; (80004e8 <EXTI15_10_IRQHandler+0xbc>)
 80004aa:	695b      	ldr	r3, [r3, #20]
 80004ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d008      	beq.n	80004c6 <EXTI15_10_IRQHandler+0x9a>
 80004b4:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <EXTI15_10_IRQHandler+0xbc>)
 80004b6:	695b      	ldr	r3, [r3, #20]
 80004b8:	4a0b      	ldr	r2, [pc, #44]	; (80004e8 <EXTI15_10_IRQHandler+0xbc>)
 80004ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004be:	6153      	str	r3, [r2, #20]
 80004c0:	4b0a      	ldr	r3, [pc, #40]	; (80004ec <EXTI15_10_IRQHandler+0xc0>)
 80004c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004c4:	4798      	blx	r3
	if(EXTI->PR & 1<<15) {EXTI->PR |= 1<<15; GP_IRQ_callBack[15]();}
 80004c6:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <EXTI15_10_IRQHandler+0xbc>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d008      	beq.n	80004e4 <EXTI15_10_IRQHandler+0xb8>
 80004d2:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <EXTI15_10_IRQHandler+0xbc>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	4a04      	ldr	r2, [pc, #16]	; (80004e8 <EXTI15_10_IRQHandler+0xbc>)
 80004d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004dc:	6153      	str	r3, [r2, #20]
 80004de:	4b03      	ldr	r3, [pc, #12]	; (80004ec <EXTI15_10_IRQHandler+0xc0>)
 80004e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004e2:	4798      	blx	r3

}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40010400 	.word	0x40010400
 80004ec:	20000020 	.word	0x20000020

080004f0 <Get_Bit_Location>:
 *      Author: Ahmed Adel Wafdy
 */
#include "Stm32_F103C6_GPIO.h"


uint8_t Get_Bit_Location(uint16_t PinNumber){
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber){
 80004fa:	88fb      	ldrh	r3, [r7, #6]
 80004fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000500:	f000 80a5 	beq.w	800064e <Get_Bit_Location+0x15e>
 8000504:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000508:	f300 80a3 	bgt.w	8000652 <Get_Bit_Location+0x162>
 800050c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000510:	f000 809b 	beq.w	800064a <Get_Bit_Location+0x15a>
 8000514:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000518:	f300 809b 	bgt.w	8000652 <Get_Bit_Location+0x162>
 800051c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000520:	f000 8091 	beq.w	8000646 <Get_Bit_Location+0x156>
 8000524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000528:	f300 8093 	bgt.w	8000652 <Get_Bit_Location+0x162>
 800052c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000530:	f000 8087 	beq.w	8000642 <Get_Bit_Location+0x152>
 8000534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000538:	f300 808b 	bgt.w	8000652 <Get_Bit_Location+0x162>
 800053c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000540:	d07d      	beq.n	800063e <Get_Bit_Location+0x14e>
 8000542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000546:	f300 8084 	bgt.w	8000652 <Get_Bit_Location+0x162>
 800054a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800054e:	d074      	beq.n	800063a <Get_Bit_Location+0x14a>
 8000550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000554:	dc7d      	bgt.n	8000652 <Get_Bit_Location+0x162>
 8000556:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800055a:	d06c      	beq.n	8000636 <Get_Bit_Location+0x146>
 800055c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000560:	dc77      	bgt.n	8000652 <Get_Bit_Location+0x162>
 8000562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000566:	d064      	beq.n	8000632 <Get_Bit_Location+0x142>
 8000568:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800056c:	dc71      	bgt.n	8000652 <Get_Bit_Location+0x162>
 800056e:	2b80      	cmp	r3, #128	; 0x80
 8000570:	d05d      	beq.n	800062e <Get_Bit_Location+0x13e>
 8000572:	2b80      	cmp	r3, #128	; 0x80
 8000574:	dc6d      	bgt.n	8000652 <Get_Bit_Location+0x162>
 8000576:	2b20      	cmp	r3, #32
 8000578:	dc48      	bgt.n	800060c <Get_Bit_Location+0x11c>
 800057a:	2b00      	cmp	r3, #0
 800057c:	dd69      	ble.n	8000652 <Get_Bit_Location+0x162>
 800057e:	3b01      	subs	r3, #1
 8000580:	2b1f      	cmp	r3, #31
 8000582:	d866      	bhi.n	8000652 <Get_Bit_Location+0x162>
 8000584:	a201      	add	r2, pc, #4	; (adr r2, 800058c <Get_Bit_Location+0x9c>)
 8000586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800058a:	bf00      	nop
 800058c:	08000613 	.word	0x08000613
 8000590:	08000617 	.word	0x08000617
 8000594:	08000653 	.word	0x08000653
 8000598:	0800061b 	.word	0x0800061b
 800059c:	08000653 	.word	0x08000653
 80005a0:	08000653 	.word	0x08000653
 80005a4:	08000653 	.word	0x08000653
 80005a8:	0800061f 	.word	0x0800061f
 80005ac:	08000653 	.word	0x08000653
 80005b0:	08000653 	.word	0x08000653
 80005b4:	08000653 	.word	0x08000653
 80005b8:	08000653 	.word	0x08000653
 80005bc:	08000653 	.word	0x08000653
 80005c0:	08000653 	.word	0x08000653
 80005c4:	08000653 	.word	0x08000653
 80005c8:	08000623 	.word	0x08000623
 80005cc:	08000653 	.word	0x08000653
 80005d0:	08000653 	.word	0x08000653
 80005d4:	08000653 	.word	0x08000653
 80005d8:	08000653 	.word	0x08000653
 80005dc:	08000653 	.word	0x08000653
 80005e0:	08000653 	.word	0x08000653
 80005e4:	08000653 	.word	0x08000653
 80005e8:	08000653 	.word	0x08000653
 80005ec:	08000653 	.word	0x08000653
 80005f0:	08000653 	.word	0x08000653
 80005f4:	08000653 	.word	0x08000653
 80005f8:	08000653 	.word	0x08000653
 80005fc:	08000653 	.word	0x08000653
 8000600:	08000653 	.word	0x08000653
 8000604:	08000653 	.word	0x08000653
 8000608:	08000627 	.word	0x08000627
 800060c:	2b40      	cmp	r3, #64	; 0x40
 800060e:	d00c      	beq.n	800062a <Get_Bit_Location+0x13a>
 8000610:	e01f      	b.n	8000652 <Get_Bit_Location+0x162>
		case GPIO_PIN_0:
			return 0;
 8000612:	2300      	movs	r3, #0
 8000614:	e01e      	b.n	8000654 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_1:
			return 4;
 8000616:	2304      	movs	r3, #4
 8000618:	e01c      	b.n	8000654 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_2:
			return 8;
 800061a:	2308      	movs	r3, #8
 800061c:	e01a      	b.n	8000654 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_3:
			return 12;
 800061e:	230c      	movs	r3, #12
 8000620:	e018      	b.n	8000654 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_4:
			return 16;
 8000622:	2310      	movs	r3, #16
 8000624:	e016      	b.n	8000654 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_5:
			return 20;
 8000626:	2314      	movs	r3, #20
 8000628:	e014      	b.n	8000654 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_6:
			return 24;
 800062a:	2318      	movs	r3, #24
 800062c:	e012      	b.n	8000654 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_7:
			return 28;
 800062e:	231c      	movs	r3, #28
 8000630:	e010      	b.n	8000654 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_8:
			return 0;
 8000632:	2300      	movs	r3, #0
 8000634:	e00e      	b.n	8000654 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_9:
			return 4;
 8000636:	2304      	movs	r3, #4
 8000638:	e00c      	b.n	8000654 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_10:
			return 8;
 800063a:	2308      	movs	r3, #8
 800063c:	e00a      	b.n	8000654 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_11:
			return 12;
 800063e:	230c      	movs	r3, #12
 8000640:	e008      	b.n	8000654 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_12:
			return 16;
 8000642:	2310      	movs	r3, #16
 8000644:	e006      	b.n	8000654 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_13:
			return 20;
 8000646:	2314      	movs	r3, #20
 8000648:	e004      	b.n	8000654 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_14:
			return 24;
 800064a:	2318      	movs	r3, #24
 800064c:	e002      	b.n	8000654 <Get_Bit_Location+0x164>
			break;
		case GPIO_PIN_15:
			return 28;
 800064e:	231c      	movs	r3, #28
 8000650:	e000      	b.n	8000654 <Get_Bit_Location+0x164>
			break;
	}
	return 0;
 8000652:	2300      	movs	r3, #0
}
 8000654:	4618      	mov	r0, r3
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <MCAL_GPIO_Init>:
 * @param[in]	- GPIOx: Where x can be (A...E) to select the GPIO peripheral
 * @param[in]	- PinConfig: Pointer to GPIO_PIN_CONFIG_T structure that contains the configurations of GPIO pin
 * @retval		- void ====> none
 * Note			- none
 * */
void MCAL_GPIO_Init(GPIO_t *GPIOx,GPIO_PIN_CONFIG_T *PinConfig){
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) (x=A..E)
	//Port configuration register high (GPIOx_CRH) (x=A..E)
	volatile uint32_t *ConfiguredRegister = NULL;
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
	uint32_t pin_config = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	60bb      	str	r3, [r7, #8]
	if(PinConfig->GPIO_PIN_NUMBER < GPIO_PIN_8){
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	881b      	ldrh	r3, [r3, #0]
 8000676:	2bff      	cmp	r3, #255	; 0xff
 8000678:	d802      	bhi.n	8000680 <MCAL_GPIO_Init+0x20>
		ConfiguredRegister = &(GPIOx->CRL);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	e002      	b.n	8000686 <MCAL_GPIO_Init+0x26>
	}
	else{
		ConfiguredRegister = &(GPIOx->CRH);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	3304      	adds	r3, #4
 8000684:	60fb      	str	r3, [r7, #12]
	}
	// We should clear registers CNFy[1:0]: Port x configuration bits (y= 0 .. 7), MODEy[1:0]: Port x mode bits (y= 0 .. 7)
	(*ConfiguredRegister) &= ~(0xf << (Get_Bit_Location(PinConfig->GPIO_PIN_NUMBER)));
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	881b      	ldrh	r3, [r3, #0]
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff ff30 	bl	80004f0 <Get_Bit_Location>
 8000690:	4603      	mov	r3, r0
 8000692:	461a      	mov	r2, r3
 8000694:	230f      	movs	r3, #15
 8000696:	4093      	lsls	r3, r2
 8000698:	43da      	mvns	r2, r3
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	401a      	ands	r2, r3
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	601a      	str	r2, [r3, #0]
	// if GPIO ====>Output
	if( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP))
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	789b      	ldrb	r3, [r3, #2]
 80006a8:	2b05      	cmp	r3, #5
 80006aa:	d00b      	beq.n	80006c4 <MCAL_GPIO_Init+0x64>
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	789b      	ldrb	r3, [r3, #2]
 80006b0:	2b04      	cmp	r3, #4
 80006b2:	d007      	beq.n	80006c4 <MCAL_GPIO_Init+0x64>
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	789b      	ldrb	r3, [r3, #2]
 80006b8:	2b07      	cmp	r3, #7
 80006ba:	d003      	beq.n	80006c4 <MCAL_GPIO_Init+0x64>
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	789b      	ldrb	r3, [r3, #2]
 80006c0:	2b06      	cmp	r3, #6
 80006c2:	d10a      	bne.n	80006da <MCAL_GPIO_Init+0x7a>
	{
		//set CNFy[1:0],MODEy[1:0]
		pin_config = ( ( (PinConfig->GPIO_MODE-4) << 2 ) | (PinConfig->GPIO_OUTPUT_SPEED) ) &0x0f ;
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	789b      	ldrb	r3, [r3, #2]
 80006c8:	3b04      	subs	r3, #4
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	683a      	ldr	r2, [r7, #0]
 80006ce:	78d2      	ldrb	r2, [r2, #3]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	f003 030f 	and.w	r3, r3, #15
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	e02b      	b.n	8000732 <MCAL_GPIO_Init+0xd2>
	}
	// if GPIO ====>Input 00: Input mode (reset state)
	else{
		if( (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_Analog)){
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	789b      	ldrb	r3, [r3, #2]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d003      	beq.n	80006ea <MCAL_GPIO_Init+0x8a>
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	789b      	ldrb	r3, [r3, #2]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d106      	bne.n	80006f8 <MCAL_GPIO_Init+0x98>
			//set CNFy[1:0],MODEy[1:0]
			pin_config = (( ( (PinConfig->GPIO_MODE) << 2 ) | 0x0) &0x0f);
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	789b      	ldrb	r3, [r3, #2]
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	f003 030f 	and.w	r3, r3, #15
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	e01c      	b.n	8000732 <MCAL_GPIO_Init+0xd2>
		}
		else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT){
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	789b      	ldrb	r3, [r3, #2]
 80006fc:	2b08      	cmp	r3, #8
 80006fe:	d102      	bne.n	8000706 <MCAL_GPIO_Init+0xa6>
			//set CNFy[1:0],MODEy[1:0]
			pin_config = (( ( GPIO_MODE_INPUT_FLO << 2 ) | 0x0) &0x0f);
 8000700:	2304      	movs	r3, #4
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	e015      	b.n	8000732 <MCAL_GPIO_Init+0xd2>
		}
		//Input with pull-up / pull-down
		else{
			pin_config = (( ( GPIO_MODE_INPUT_PU << 2 ) | 0x0) &0x0f);
 8000706:	2308      	movs	r3, #8
 8000708:	60bb      	str	r3, [r7, #8]
			if(PinConfig->GPIO_MODE ==  GPIO_MODE_INPUT_PU){
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	789b      	ldrb	r3, [r3, #2]
 800070e:	2b02      	cmp	r3, #2
 8000710:	d107      	bne.n	8000722 <MCAL_GPIO_Init+0xc2>
				//PxODR register 1 Input pull-up
				GPIOx->ODR |= PinConfig->GPIO_PIN_NUMBER;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	68db      	ldr	r3, [r3, #12]
 8000716:	683a      	ldr	r2, [r7, #0]
 8000718:	8812      	ldrh	r2, [r2, #0]
 800071a:	431a      	orrs	r2, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	e007      	b.n	8000732 <MCAL_GPIO_Init+0xd2>
			}
			else{
				//PxODR register 0 Input pull-down
				GPIOx->ODR &= ~(PinConfig->GPIO_PIN_NUMBER);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	68db      	ldr	r3, [r3, #12]
 8000726:	683a      	ldr	r2, [r7, #0]
 8000728:	8812      	ldrh	r2, [r2, #0]
 800072a:	43d2      	mvns	r2, r2
 800072c:	401a      	ands	r2, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	60da      	str	r2, [r3, #12]
			}
		}
	}
	// Write on CNFy[1:0]: Port x configuration bits (y= 0 .. 7), MODEy[1:0]: Port x mode bits (y= 0 .. 7)
	(*ConfiguredRegister) |= (pin_config << (Get_Bit_Location(PinConfig->GPIO_PIN_NUMBER)));
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	881b      	ldrh	r3, [r3, #0]
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff feda 	bl	80004f0 <Get_Bit_Location>
 800073c:	4603      	mov	r3, r0
 800073e:	461a      	mov	r2, r3
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	fa03 f202 	lsl.w	r2, r3, r2
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	431a      	orrs	r2, r3
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	601a      	str	r2, [r3, #0]
}
 8000750:	bf00      	nop
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <MCAL_RCC_GetSYS_CLKFreq>:
 * @brief		- After a system reset, the HSI oscillator is selected as system clock. When a clock source is
used directly or through the PLL as system clock, it is not possible to stop it.
 * @retval		- uint32_t : amount of Frequancy generated by system clock
 * Note			- none
 * */
uint32_t MCAL_RCC_GetSYS_CLKFreq(void){
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
Set and cleared by hardware to indicate which clock source is used as system clock.
00: HSI oscillator used as system clock
01: HSE oscillator used as system clock
10: PLL used as system clock
11: not applicable*/
	switch ((RCC->CFGR >> 2)&0b11){
 800075c:	4b0b      	ldr	r3, [pc, #44]	; (800078c <MCAL_RCC_GetSYS_CLKFreq+0x34>)
 800075e:	685b      	ldr	r3, [r3, #4]
 8000760:	089b      	lsrs	r3, r3, #2
 8000762:	f003 0303 	and.w	r3, r3, #3
 8000766:	2b02      	cmp	r3, #2
 8000768:	d00a      	beq.n	8000780 <MCAL_RCC_GetSYS_CLKFreq+0x28>
 800076a:	2b02      	cmp	r3, #2
 800076c:	d80a      	bhi.n	8000784 <MCAL_RCC_GetSYS_CLKFreq+0x2c>
 800076e:	2b00      	cmp	r3, #0
 8000770:	d002      	beq.n	8000778 <MCAL_RCC_GetSYS_CLKFreq+0x20>
 8000772:	2b01      	cmp	r3, #1
 8000774:	d002      	beq.n	800077c <MCAL_RCC_GetSYS_CLKFreq+0x24>
 8000776:	e005      	b.n	8000784 <MCAL_RCC_GetSYS_CLKFreq+0x2c>
		case 0:
			return HSI_RC_CLK;
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <MCAL_RCC_GetSYS_CLKFreq+0x38>)
 800077a:	e003      	b.n	8000784 <MCAL_RCC_GetSYS_CLKFreq+0x2c>
			break;
		case 1:
			return HSE_CLK;
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <MCAL_RCC_GetSYS_CLKFreq+0x3c>)
 800077e:	e001      	b.n	8000784 <MCAL_RCC_GetSYS_CLKFreq+0x2c>
			break;
		case 2:
			return 16000000;
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <MCAL_RCC_GetSYS_CLKFreq+0x3c>)
 8000782:	e7ff      	b.n	8000784 <MCAL_RCC_GetSYS_CLKFreq+0x2c>
			break;
	}
}
 8000784:	4618      	mov	r0, r3
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr
 800078c:	40021000 	.word	0x40021000
 8000790:	007a1200 	.word	0x007a1200
 8000794:	00f42400 	.word	0x00f42400

08000798 <MCAL_RCC_Get_HCLKFreq>:
 * @Fn			- MCAL_RCC_Get_HCLKFreq
 * @brief		- Get HCLK source and Compute PCLK1 frequency
 * @retval		- uint32_t ====>
 * Note			- none
 * */
uint32_t MCAL_RCC_Get_HCLKFreq(void){
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetSYS_CLKFreq() >> AHBPrescTable[ ( (RCC->CFGR >> 4 ) & 0xF) ]  );
 800079c:	f7ff ffdc 	bl	8000758 <MCAL_RCC_GetSYS_CLKFreq>
 80007a0:	4602      	mov	r2, r0
 80007a2:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <MCAL_RCC_Get_HCLKFreq+0x20>)
 80007a4:	685b      	ldr	r3, [r3, #4]
 80007a6:	091b      	lsrs	r3, r3, #4
 80007a8:	f003 030f 	and.w	r3, r3, #15
 80007ac:	4903      	ldr	r1, [pc, #12]	; (80007bc <MCAL_RCC_Get_HCLKFreq+0x24>)
 80007ae:	5ccb      	ldrb	r3, [r1, r3]
 80007b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40021000 	.word	0x40021000
 80007bc:	080011b4 	.word	0x080011b4

080007c0 <MCAL_RCC_Get_PCLK1Freq>:
 * @Fn			- MCAL_RCC_Get_PCLK1Freq
 * @brief		- Get HCLK source and Compute PCLK1 frequency
 * @retval		- uint32_t ====> PCLK1 frequency
 * Note			- none
 * */
uint32_t MCAL_RCC_Get_PCLK1Freq(void){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
	return (MCAL_RCC_Get_HCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 8 ) & 0b111) ]  );
 80007c4:	f7ff ffe8 	bl	8000798 <MCAL_RCC_Get_HCLKFreq>
 80007c8:	4602      	mov	r2, r0
 80007ca:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <MCAL_RCC_Get_PCLK1Freq+0x20>)
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	0a1b      	lsrs	r3, r3, #8
 80007d0:	f003 0307 	and.w	r3, r3, #7
 80007d4:	4903      	ldr	r1, [pc, #12]	; (80007e4 <MCAL_RCC_Get_PCLK1Freq+0x24>)
 80007d6:	5ccb      	ldrb	r3, [r1, r3]
 80007d8:	fa22 f303 	lsr.w	r3, r2, r3

}
 80007dc:	4618      	mov	r0, r3
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40021000 	.word	0x40021000
 80007e4:	080011ac 	.word	0x080011ac

080007e8 <MCAL_RCC_Get_PCLK2Freq>:
 * @Fn			- MCAL_RCC_GetSYS_PCLK2Freq
 * @brief		- Get HCLK source and Compute PCLK2 frequency
 * @retval		- uint32_t ====> PCLK1 frequency
 * Note			- none
 * */
uint32_t MCAL_RCC_Get_PCLK2Freq(void){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	return (MCAL_RCC_Get_HCLKFreq() >> APBPrescTable[ ( (RCC->CFGR >> 11 ) & 0b111) ]  );
 80007ec:	f7ff ffd4 	bl	8000798 <MCAL_RCC_Get_HCLKFreq>
 80007f0:	4602      	mov	r2, r0
 80007f2:	4b05      	ldr	r3, [pc, #20]	; (8000808 <MCAL_RCC_Get_PCLK2Freq+0x20>)
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	0adb      	lsrs	r3, r3, #11
 80007f8:	f003 0307 	and.w	r3, r3, #7
 80007fc:	4903      	ldr	r1, [pc, #12]	; (800080c <MCAL_RCC_Get_PCLK2Freq+0x24>)
 80007fe:	5ccb      	ldrb	r3, [r1, r3]
 8000800:	fa22 f303 	lsr.w	r3, r2, r3

}
 8000804:	4618      	mov	r0, r3
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40021000 	.word	0x40021000
 800080c:	080011ac 	.word	0x080011ac

08000810 <MCAL_SPI_Init>:
 * @retval 			- None
 * Note 			- Supported for SPI FULL DUPLEX Master/Slave only & NSS Hardware/Software
 * 					- You have to configure RCC to select clock for the selected SPI Module
 */
void MCAL_SPI_Init(SPI_t *SPIx, SPI_Config_t *Config)
{
 8000810:	b4b0      	push	{r4, r5, r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
	/* Safety for register, Using this technique for protect the peripheral form working before the full configurations */
	uint16_t tempReg_CR1 = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	81fb      	strh	r3, [r7, #14]
	uint16_t tempReg_CR2 = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	81bb      	strh	r3, [r7, #12]

	if(SPIx == SPI1)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4a4c      	ldr	r2, [pc, #304]	; (8000958 <MCAL_SPI_Init+0x148>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d113      	bne.n	8000852 <MCAL_SPI_Init+0x42>
		{
			Global_SPI_Config1 = *Config;
 800082a:	4a4c      	ldr	r2, [pc, #304]	; (800095c <MCAL_SPI_Init+0x14c>)
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	4614      	mov	r4, r2
 8000830:	461d      	mov	r5, r3
 8000832:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000834:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000836:	e895 0003 	ldmia.w	r5, {r0, r1}
 800083a:	e884 0003 	stmia.w	r4, {r0, r1}
			G_SPI_Config[SPI1_INDEX] = &Global_SPI_Config1;
 800083e:	4b48      	ldr	r3, [pc, #288]	; (8000960 <MCAL_SPI_Init+0x150>)
 8000840:	4a46      	ldr	r2, [pc, #280]	; (800095c <MCAL_SPI_Init+0x14c>)
 8000842:	601a      	str	r2, [r3, #0]

			RCC_SPI1_CLK_EN();
 8000844:	4b47      	ldr	r3, [pc, #284]	; (8000964 <MCAL_SPI_Init+0x154>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	4a46      	ldr	r2, [pc, #280]	; (8000964 <MCAL_SPI_Init+0x154>)
 800084a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800084e:	6193      	str	r3, [r2, #24]
 8000850:	e016      	b.n	8000880 <MCAL_SPI_Init+0x70>
		}
		else if(SPIx == SPI2)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4a44      	ldr	r2, [pc, #272]	; (8000968 <MCAL_SPI_Init+0x158>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d112      	bne.n	8000880 <MCAL_SPI_Init+0x70>
		{
			Global_SPI_Config2 = *Config;
 800085a:	4a44      	ldr	r2, [pc, #272]	; (800096c <MCAL_SPI_Init+0x15c>)
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	4614      	mov	r4, r2
 8000860:	461d      	mov	r5, r3
 8000862:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000864:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000866:	e895 0003 	ldmia.w	r5, {r0, r1}
 800086a:	e884 0003 	stmia.w	r4, {r0, r1}
			G_SPI_Config[SPI2_INDEX] = &Global_SPI_Config2;
 800086e:	4b3c      	ldr	r3, [pc, #240]	; (8000960 <MCAL_SPI_Init+0x150>)
 8000870:	4a3e      	ldr	r2, [pc, #248]	; (800096c <MCAL_SPI_Init+0x15c>)
 8000872:	605a      	str	r2, [r3, #4]


			RCC_SPI2_CLK_EN();
 8000874:	4b3b      	ldr	r3, [pc, #236]	; (8000964 <MCAL_SPI_Init+0x154>)
 8000876:	69db      	ldr	r3, [r3, #28]
 8000878:	4a3a      	ldr	r2, [pc, #232]	; (8000964 <MCAL_SPI_Init+0x154>)
 800087a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800087e:	61d3      	str	r3, [r2, #28]
		}
	/* 2. Enable the SPI */
	tempReg_CR1 |= (uint16_t)(1<<6); 	/* Bit 6 SPE: SPI enable */
 8000880:	89fb      	ldrh	r3, [r7, #14]
 8000882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000886:	81fb      	strh	r3, [r7, #14]

	/* 3. Set Master or Slave */
	tempReg_CR1 |= Config->SPI_Mode;
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	881a      	ldrh	r2, [r3, #0]
 800088c:	89fb      	ldrh	r3, [r7, #14]
 800088e:	4313      	orrs	r3, r2
 8000890:	81fb      	strh	r3, [r7, #14]

	/* 4. Set Communication Mode */
	tempReg_CR1 |= Config->Communication_Mode;
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	885a      	ldrh	r2, [r3, #2]
 8000896:	89fb      	ldrh	r3, [r7, #14]
 8000898:	4313      	orrs	r3, r2
 800089a:	81fb      	strh	r3, [r7, #14]

	/* 5. Set Frame format */
	tempReg_CR1 |= Config->Frame_Format;
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	889a      	ldrh	r2, [r3, #4]
 80008a0:	89fb      	ldrh	r3, [r7, #14]
 80008a2:	4313      	orrs	r3, r2
 80008a4:	81fb      	strh	r3, [r7, #14]

	/* 6. Set Data size */
	tempReg_CR1 |= Config->Frame_Size;
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	88da      	ldrh	r2, [r3, #6]
 80008aa:	89fb      	ldrh	r3, [r7, #14]
 80008ac:	4313      	orrs	r3, r2
 80008ae:	81fb      	strh	r3, [r7, #14]

	/* 7. Set Clock Polarity */
	tempReg_CR1 |= Config->CLK_Polarity;
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	891a      	ldrh	r2, [r3, #8]
 80008b4:	89fb      	ldrh	r3, [r7, #14]
 80008b6:	4313      	orrs	r3, r2
 80008b8:	81fb      	strh	r3, [r7, #14]

	/* 8. Set Clock Phase */
	tempReg_CR1 |= Config->CLK_Phase;
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	895a      	ldrh	r2, [r3, #10]
 80008be:	89fb      	ldrh	r3, [r7, #14]
 80008c0:	4313      	orrs	r3, r2
 80008c2:	81fb      	strh	r3, [r7, #14]

	/* 9. Set Slave Select Management */
	if(Config->NSS == NSS_HW_MASTER_SS_OUTPUT_ENABLED)
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	899b      	ldrh	r3, [r3, #12]
 80008c8:	2b04      	cmp	r3, #4
 80008ca:	d105      	bne.n	80008d8 <MCAL_SPI_Init+0xc8>
	{
		tempReg_CR2 |= Config->NSS;
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	899a      	ldrh	r2, [r3, #12]
 80008d0:	89bb      	ldrh	r3, [r7, #12]
 80008d2:	4313      	orrs	r3, r2
 80008d4:	81bb      	strh	r3, [r7, #12]
 80008d6:	e010      	b.n	80008fa <MCAL_SPI_Init+0xea>
	}
	else if(Config->NSS == NSS_HW_MASTER_SS_OUTPUT_DISABLED)
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	899b      	ldrh	r3, [r3, #12]
 80008dc:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d105      	bne.n	80008f0 <MCAL_SPI_Init+0xe0>
	{
		tempReg_CR2 &= Config->NSS;
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	899a      	ldrh	r2, [r3, #12]
 80008e8:	89bb      	ldrh	r3, [r7, #12]
 80008ea:	4013      	ands	r3, r2
 80008ec:	81bb      	strh	r3, [r7, #12]
 80008ee:	e004      	b.n	80008fa <MCAL_SPI_Init+0xea>
	}
	else
	{
		tempReg_CR1 |= Config->NSS;
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	899a      	ldrh	r2, [r3, #12]
 80008f4:	89fb      	ldrh	r3, [r7, #14]
 80008f6:	4313      	orrs	r3, r2
 80008f8:	81fb      	strh	r3, [r7, #14]
	}

	/* 10. Set BoudRate Pre-scaler */
	tempReg_CR1 |= Config->BaudRate_Prescaler;
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	89da      	ldrh	r2, [r3, #14]
 80008fe:	89fb      	ldrh	r3, [r7, #14]
 8000900:	4313      	orrs	r3, r2
 8000902:	81fb      	strh	r3, [r7, #14]

	/* 11. Set Interrupt Type */
	if(Config->IRQ_Enable != IRQ_ENABLE_NONE)
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	8a1b      	ldrh	r3, [r3, #16]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d019      	beq.n	8000940 <MCAL_SPI_Init+0x130>
	{
		tempReg_CR2 |= Config->IRQ_Enable;
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	8a1a      	ldrh	r2, [r3, #16]
 8000910:	89bb      	ldrh	r3, [r7, #12]
 8000912:	4313      	orrs	r3, r2
 8000914:	81bb      	strh	r3, [r7, #12]

		/* 12. Open the global Interrupt for each peripheral */
		if (SPIx == SPI1)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4a0f      	ldr	r2, [pc, #60]	; (8000958 <MCAL_SPI_Init+0x148>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d106      	bne.n	800092c <MCAL_SPI_Init+0x11c>
		{
			NVIC_IRQ35_SPI1_EN();
 800091e:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MCAL_SPI_Init+0x160>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a13      	ldr	r2, [pc, #76]	; (8000970 <MCAL_SPI_Init+0x160>)
 8000924:	f043 0308 	orr.w	r3, r3, #8
 8000928:	6013      	str	r3, [r2, #0]
 800092a:	e009      	b.n	8000940 <MCAL_SPI_Init+0x130>
		}
		else if(SPIx == SPI2)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <MCAL_SPI_Init+0x158>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d105      	bne.n	8000940 <MCAL_SPI_Init+0x130>
		{
			NVIC_IRQ36_SPI2_EN();
 8000934:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MCAL_SPI_Init+0x160>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a0d      	ldr	r2, [pc, #52]	; (8000970 <MCAL_SPI_Init+0x160>)
 800093a:	f043 0310 	orr.w	r3, r3, #16
 800093e:	6013      	str	r3, [r2, #0]
		}
	}

	/*13. Config your register using the temp register used to protect the configurations */
	SPIx->CR1 = tempReg_CR1;
 8000940:	89fa      	ldrh	r2, [r7, #14]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	601a      	str	r2, [r3, #0]
	SPIx->CR2 = tempReg_CR2;
 8000946:	89ba      	ldrh	r2, [r7, #12]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	605a      	str	r2, [r3, #4]

}
 800094c:	bf00      	nop
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	bcb0      	pop	{r4, r5, r7}
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	40013000 	.word	0x40013000
 800095c:	20000064 	.word	0x20000064
 8000960:	2000005c 	.word	0x2000005c
 8000964:	40021000 	.word	0x40021000
 8000968:	40003800 	.word	0x40003800
 800096c:	2000007c 	.word	0x2000007c
 8000970:	e000e104 	.word	0xe000e104

08000974 <MCAL_SPI_GPIO_Set_Pins>:
 * @retval 			- None
 * Note 			- Must open clock for AFIO & GPIO After GPIO Initialization
 * 					- Supported for SPI FULL DUPLEX Master/Slave only & NSS Hardware/Software
 */
void MCAL_SPI_GPIO_Set_Pins(SPI_t *SPIx)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	GPIO_PIN_CONFIG_T SPI_GPIO_Config;

	/* Depending the recommendation in data sheet -> Table 25. SPI 	*/
	/*  "SPI pin-out"    "Configuration"     "GPIO configuration" 	*/
	if (SPIx == SPI1)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4a83      	ldr	r2, [pc, #524]	; (8000b8c <MCAL_SPI_GPIO_Set_Pins+0x218>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d178      	bne.n	8000a76 <MCAL_SPI_GPIO_Set_Pins+0x102>
	{
		if(G_SPI_Config[SPI1_INDEX]->SPI_Mode == SPI_MODE_MASTER) /* Master */
 8000984:	4b82      	ldr	r3, [pc, #520]	; (8000b90 <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	2b04      	cmp	r3, #4
 800098c:	d143      	bne.n	8000a16 <MCAL_SPI_GPIO_Set_Pins+0xa2>
		{
			/* PA4 : SPI1_NSS */
			switch (G_SPI_Config[SPI1_INDEX]->NSS)
 800098e:	4b80      	ldr	r3, [pc, #512]	; (8000b90 <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	899b      	ldrh	r3, [r3, #12]
 8000994:	2b04      	cmp	r3, #4
 8000996:	d00e      	beq.n	80009b6 <MCAL_SPI_GPIO_Set_Pins+0x42>
 8000998:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 800099c:	4293      	cmp	r3, r2
 800099e:	d117      	bne.n	80009d0 <MCAL_SPI_GPIO_Set_Pins+0x5c>
			{
			 	 /* Input */
				case NSS_HW_MASTER_SS_OUTPUT_DISABLED:
					/* Hardware Master/Slave Input Floating */
					SPI_GPIO_Config.GPIO_PIN_NUMBER = GPIO_PIN_4;
 80009a0:	2310      	movs	r3, #16
 80009a2:	81bb      	strh	r3, [r7, #12]
					SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80009a4:	2301      	movs	r3, #1
 80009a6:	73bb      	strb	r3, [r7, #14]
					MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	4619      	mov	r1, r3
 80009ae:	4879      	ldr	r0, [pc, #484]	; (8000b94 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 80009b0:	f7ff fe56 	bl	8000660 <MCAL_GPIO_Init>
					break;
 80009b4:	e00c      	b.n	80009d0 <MCAL_SPI_GPIO_Set_Pins+0x5c>

				/* Output */
				case NSS_HW_MASTER_SS_OUTPUT_ENABLED:
					/* Hardware Master/NNS Output Alternate function push-pull */
					SPI_GPIO_Config.GPIO_PIN_NUMBER = GPIO_PIN_4;
 80009b6:	2310      	movs	r3, #16
 80009b8:	81bb      	strh	r3, [r7, #12]
					SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80009ba:	2306      	movs	r3, #6
 80009bc:	73bb      	strb	r3, [r7, #14]
					SPI_GPIO_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 80009be:	2301      	movs	r3, #1
 80009c0:	73fb      	strb	r3, [r7, #15]
					MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 80009c2:	f107 030c 	add.w	r3, r7, #12
 80009c6:	4619      	mov	r1, r3
 80009c8:	4872      	ldr	r0, [pc, #456]	; (8000b94 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 80009ca:	f7ff fe49 	bl	8000660 <MCAL_GPIO_Init>
					break;
 80009ce:	bf00      	nop
			}

			/* PA5 : SPI1_SCK */
			/* Master Alternate function push-pull */
			SPI_GPIO_Config.GPIO_PIN_NUMBER = GPIO_PIN_5;
 80009d0:	2320      	movs	r3, #32
 80009d2:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80009d4:	2306      	movs	r3, #6
 80009d6:	73bb      	strb	r3, [r7, #14]
			SPI_GPIO_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 80009d8:	2301      	movs	r3, #1
 80009da:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	4619      	mov	r1, r3
 80009e2:	486c      	ldr	r0, [pc, #432]	; (8000b94 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 80009e4:	f7ff fe3c 	bl	8000660 <MCAL_GPIO_Init>

			/* PA6 : SPI1_MISO */
			/* Full duplex / master Input floating / Input pull-up */
			SPI_GPIO_Config.GPIO_PIN_NUMBER = GPIO_PIN_6;
 80009e8:	2340      	movs	r3, #64	; 0x40
 80009ea:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80009ec:	2301      	movs	r3, #1
 80009ee:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	4619      	mov	r1, r3
 80009f6:	4867      	ldr	r0, [pc, #412]	; (8000b94 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 80009f8:	f7ff fe32 	bl	8000660 <MCAL_GPIO_Init>

			/* PA7 : SPI1_MOSI */
			/* Full duplex / master Alternate function push-pull */
			SPI_GPIO_Config.GPIO_PIN_NUMBER = GPIO_PIN_7;
 80009fc:	2380      	movs	r3, #128	; 0x80
 80009fe:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000a00:	2306      	movs	r3, #6
 8000a02:	73bb      	strb	r3, [r7, #14]
			SPI_GPIO_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 8000a04:	2301      	movs	r3, #1
 8000a06:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 8000a08:	f107 030c 	add.w	r3, r7, #12
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4861      	ldr	r0, [pc, #388]	; (8000b94 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 8000a10:	f7ff fe26 	bl	8000660 <MCAL_GPIO_Init>
			SPI_GPIO_Config.GPIO_PIN_NUMBER = GPIO_PIN_15;
			SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
			MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
		}
	}
}
 8000a14:	e0b5      	b.n	8000b82 <MCAL_SPI_GPIO_Set_Pins+0x20e>
			if(G_SPI_Config[SPI1_INDEX]->NSS == NSS_HW_SLAVE)
 8000a16:	4b5e      	ldr	r3, [pc, #376]	; (8000b90 <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	899b      	ldrh	r3, [r3, #12]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d109      	bne.n	8000a34 <MCAL_SPI_GPIO_Set_Pins+0xc0>
				SPI_GPIO_Config.GPIO_PIN_NUMBER = GPIO_PIN_4;
 8000a20:	2310      	movs	r3, #16
 8000a22:	81bb      	strh	r3, [r7, #12]
				SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000a24:	2301      	movs	r3, #1
 8000a26:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 8000a28:	f107 030c 	add.w	r3, r7, #12
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4859      	ldr	r0, [pc, #356]	; (8000b94 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 8000a30:	f7ff fe16 	bl	8000660 <MCAL_GPIO_Init>
			SPI_GPIO_Config.GPIO_PIN_NUMBER = GPIO_PIN_5;
 8000a34:	2320      	movs	r3, #32
 8000a36:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 8000a3c:	f107 030c 	add.w	r3, r7, #12
 8000a40:	4619      	mov	r1, r3
 8000a42:	4854      	ldr	r0, [pc, #336]	; (8000b94 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 8000a44:	f7ff fe0c 	bl	8000660 <MCAL_GPIO_Init>
			SPI_GPIO_Config.GPIO_PIN_NUMBER = GPIO_PIN_6;
 8000a48:	2340      	movs	r3, #64	; 0x40
 8000a4a:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000a4c:	2306      	movs	r3, #6
 8000a4e:	73bb      	strb	r3, [r7, #14]
			SPI_GPIO_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 8000a50:	2301      	movs	r3, #1
 8000a52:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 8000a54:	f107 030c 	add.w	r3, r7, #12
 8000a58:	4619      	mov	r1, r3
 8000a5a:	484e      	ldr	r0, [pc, #312]	; (8000b94 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 8000a5c:	f7ff fe00 	bl	8000660 <MCAL_GPIO_Init>
			SPI_GPIO_Config.GPIO_PIN_NUMBER = GPIO_PIN_7;
 8000a60:	2380      	movs	r3, #128	; 0x80
 8000a62:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000a64:	2301      	movs	r3, #1
 8000a66:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4849      	ldr	r0, [pc, #292]	; (8000b94 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 8000a70:	f7ff fdf6 	bl	8000660 <MCAL_GPIO_Init>
}
 8000a74:	e085      	b.n	8000b82 <MCAL_SPI_GPIO_Set_Pins+0x20e>
	else if(SPIx == SPI2)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4a47      	ldr	r2, [pc, #284]	; (8000b98 <MCAL_SPI_GPIO_Set_Pins+0x224>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	f040 8081 	bne.w	8000b82 <MCAL_SPI_GPIO_Set_Pins+0x20e>
		if(G_SPI_Config[SPI2_INDEX]->SPI_Mode == SPI_MODE_MASTER) /* Master */
 8000a80:	4b43      	ldr	r3, [pc, #268]	; (8000b90 <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	2b04      	cmp	r3, #4
 8000a88:	d148      	bne.n	8000b1c <MCAL_SPI_GPIO_Set_Pins+0x1a8>
			switch (G_SPI_Config[SPI2_INDEX]->NSS)
 8000a8a:	4b41      	ldr	r3, [pc, #260]	; (8000b90 <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	899b      	ldrh	r3, [r3, #12]
 8000a90:	2b04      	cmp	r3, #4
 8000a92:	d00f      	beq.n	8000ab4 <MCAL_SPI_GPIO_Set_Pins+0x140>
 8000a94:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d119      	bne.n	8000ad0 <MCAL_SPI_GPIO_Set_Pins+0x15c>
					SPI_GPIO_Config.GPIO_PIN_NUMBER = GPIO_PIN_12;
 8000a9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa0:	81bb      	strh	r3, [r7, #12]
					SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	73bb      	strb	r3, [r7, #14]
					MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 8000aa6:	f107 030c 	add.w	r3, r7, #12
 8000aaa:	4619      	mov	r1, r3
 8000aac:	483b      	ldr	r0, [pc, #236]	; (8000b9c <MCAL_SPI_GPIO_Set_Pins+0x228>)
 8000aae:	f7ff fdd7 	bl	8000660 <MCAL_GPIO_Init>
					break;
 8000ab2:	e00d      	b.n	8000ad0 <MCAL_SPI_GPIO_Set_Pins+0x15c>
					SPI_GPIO_Config.GPIO_PIN_NUMBER = GPIO_PIN_12;
 8000ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab8:	81bb      	strh	r3, [r7, #12]
					SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000aba:	2306      	movs	r3, #6
 8000abc:	73bb      	strb	r3, [r7, #14]
					SPI_GPIO_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	73fb      	strb	r3, [r7, #15]
					MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 8000ac2:	f107 030c 	add.w	r3, r7, #12
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4834      	ldr	r0, [pc, #208]	; (8000b9c <MCAL_SPI_GPIO_Set_Pins+0x228>)
 8000aca:	f7ff fdc9 	bl	8000660 <MCAL_GPIO_Init>
					break;
 8000ace:	bf00      	nop
			SPI_GPIO_Config.GPIO_PIN_NUMBER = GPIO_PIN_13;
 8000ad0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad4:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000ad6:	2306      	movs	r3, #6
 8000ad8:	73bb      	strb	r3, [r7, #14]
			SPI_GPIO_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 8000ada:	2301      	movs	r3, #1
 8000adc:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 8000ade:	f107 030c 	add.w	r3, r7, #12
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	482d      	ldr	r0, [pc, #180]	; (8000b9c <MCAL_SPI_GPIO_Set_Pins+0x228>)
 8000ae6:	f7ff fdbb 	bl	8000660 <MCAL_GPIO_Init>
			SPI_GPIO_Config.GPIO_PIN_NUMBER = GPIO_PIN_14;
 8000aea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000aee:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000af0:	2301      	movs	r3, #1
 8000af2:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 8000af4:	f107 030c 	add.w	r3, r7, #12
 8000af8:	4619      	mov	r1, r3
 8000afa:	4828      	ldr	r0, [pc, #160]	; (8000b9c <MCAL_SPI_GPIO_Set_Pins+0x228>)
 8000afc:	f7ff fdb0 	bl	8000660 <MCAL_GPIO_Init>
			SPI_GPIO_Config.GPIO_PIN_NUMBER = GPIO_PIN_15;
 8000b00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b04:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000b06:	2306      	movs	r3, #6
 8000b08:	73bb      	strb	r3, [r7, #14]
			SPI_GPIO_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	4619      	mov	r1, r3
 8000b14:	4821      	ldr	r0, [pc, #132]	; (8000b9c <MCAL_SPI_GPIO_Set_Pins+0x228>)
 8000b16:	f7ff fda3 	bl	8000660 <MCAL_GPIO_Init>
}
 8000b1a:	e032      	b.n	8000b82 <MCAL_SPI_GPIO_Set_Pins+0x20e>
			if(G_SPI_Config[SPI2_INDEX]->NSS == NSS_HW_SLAVE)
 8000b1c:	4b1c      	ldr	r3, [pc, #112]	; (8000b90 <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	899b      	ldrh	r3, [r3, #12]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d10a      	bne.n	8000b3c <MCAL_SPI_GPIO_Set_Pins+0x1c8>
				SPI_GPIO_Config.GPIO_PIN_NUMBER = GPIO_PIN_12;
 8000b26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2a:	81bb      	strh	r3, [r7, #12]
				SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	4619      	mov	r1, r3
 8000b36:	4819      	ldr	r0, [pc, #100]	; (8000b9c <MCAL_SPI_GPIO_Set_Pins+0x228>)
 8000b38:	f7ff fd92 	bl	8000660 <MCAL_GPIO_Init>
			SPI_GPIO_Config.GPIO_PIN_NUMBER = GPIO_PIN_13;
 8000b3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b40:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000b42:	2301      	movs	r3, #1
 8000b44:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 8000b46:	f107 030c 	add.w	r3, r7, #12
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4813      	ldr	r0, [pc, #76]	; (8000b9c <MCAL_SPI_GPIO_Set_Pins+0x228>)
 8000b4e:	f7ff fd87 	bl	8000660 <MCAL_GPIO_Init>
			SPI_GPIO_Config.GPIO_PIN_NUMBER = GPIO_PIN_14;
 8000b52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b56:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000b58:	2306      	movs	r3, #6
 8000b5a:	73bb      	strb	r3, [r7, #14]
			SPI_GPIO_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	4619      	mov	r1, r3
 8000b66:	480d      	ldr	r0, [pc, #52]	; (8000b9c <MCAL_SPI_GPIO_Set_Pins+0x228>)
 8000b68:	f7ff fd7a 	bl	8000660 <MCAL_GPIO_Init>
			SPI_GPIO_Config.GPIO_PIN_NUMBER = GPIO_PIN_15;
 8000b6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b70:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000b72:	2301      	movs	r3, #1
 8000b74:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 8000b76:	f107 030c 	add.w	r3, r7, #12
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4807      	ldr	r0, [pc, #28]	; (8000b9c <MCAL_SPI_GPIO_Set_Pins+0x228>)
 8000b7e:	f7ff fd6f 	bl	8000660 <MCAL_GPIO_Init>
}
 8000b82:	bf00      	nop
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40013000 	.word	0x40013000
 8000b90:	2000005c 	.word	0x2000005c
 8000b94:	40010800 	.word	0x40010800
 8000b98:	40003800 	.word	0x40003800
 8000b9c:	40010c00 	.word	0x40010c00

08000ba0 <MCAL_SPI_TX_RX>:
 * @param [in] 		- Polling_En : Enable Polling or Disable it
 * @retval 			- None
 * Note 			- None
 */
void MCAL_SPI_TX_RX(SPI_t *SPIx, uint16_t *pTxBuffer, enum Polling_Mechanism Polling_En)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	4613      	mov	r3, r2
 8000bac:	71fb      	strb	r3, [r7, #7]
	if(Polling_En == SPI_enable)
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d106      	bne.n	8000bc2 <MCAL_SPI_TX_RX+0x22>
	{
		/* Wait for transmission complete */
		while(! (SPIx->SR & SPI_SR_TXE));
 8000bb4:	bf00      	nop
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	f003 0302 	and.w	r3, r3, #2
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d0f9      	beq.n	8000bb6 <MCAL_SPI_TX_RX+0x16>
	}

	/* Start transmission, Write data to SPI data register */
	SPIx->DR = *(pTxBuffer);
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	60da      	str	r2, [r3, #12]

/* =================================================== */

	if(Polling_En == SPI_enable)
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d106      	bne.n	8000be0 <MCAL_SPI_TX_RX+0x40>
	{
		/* Wait for reception complete */
		while(! (SPIx->SR & SPI_SR_RXNE));
 8000bd2:	bf00      	nop
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d0f9      	beq.n	8000bd4 <MCAL_SPI_TX_RX+0x34>
	}

	/* Start reception, Write data to SPI data register */
	*(pTxBuffer) = SPIx->DR;
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	801a      	strh	r2, [r3, #0]
}
 8000bea:	bf00      	nop
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr

08000bf4 <SPI1_IRQHandler>:
/* ================================================================ */
/* ================= IRQ Function Definitions ===================== */
/* ================================================================ */

void SPI1_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC IRQ;

	IRQ.TXE = ((SPI1->SR & (1<<1)) >> 1);
 8000bfa:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <SPI1_IRQHandler+0x54>)
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	085b      	lsrs	r3, r3, #1
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	793b      	ldrb	r3, [r7, #4]
 8000c08:	f362 0300 	bfi	r3, r2, #0, #1
 8000c0c:	713b      	strb	r3, [r7, #4]
	IRQ.RXNE = ((SPI1->SR & (1<<0)) >> 0);
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <SPI1_IRQHandler+0x54>)
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	793b      	ldrb	r3, [r7, #4]
 8000c1a:	f362 0341 	bfi	r3, r2, #1, #1
 8000c1e:	713b      	strb	r3, [r7, #4]
	IRQ.ERRI = ((SPI1->SR & (1<<4)) >> 4);
 8000c20:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <SPI1_IRQHandler+0x54>)
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	091b      	lsrs	r3, r3, #4
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	793b      	ldrb	r3, [r7, #4]
 8000c2e:	f362 0382 	bfi	r3, r2, #2, #1
 8000c32:	713b      	strb	r3, [r7, #4]

	G_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack(IRQ);
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <SPI1_IRQHandler+0x58>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	695b      	ldr	r3, [r3, #20]
 8000c3a:	7938      	ldrb	r0, [r7, #4]
 8000c3c:	4798      	blx	r3
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40013000 	.word	0x40013000
 8000c4c:	2000005c 	.word	0x2000005c

08000c50 <SPI2_IRQHandler>:


void SPI2_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC IRQ;

	IRQ.TXE = ((SPI2->SR & (1<<1)) >> 1);
 8000c56:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <SPI2_IRQHandler+0x54>)
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	085b      	lsrs	r3, r3, #1
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	793b      	ldrb	r3, [r7, #4]
 8000c64:	f362 0300 	bfi	r3, r2, #0, #1
 8000c68:	713b      	strb	r3, [r7, #4]
	IRQ.RXNE = ((SPI2->SR & (1<<0)) >> 0);
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <SPI2_IRQHandler+0x54>)
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	793b      	ldrb	r3, [r7, #4]
 8000c76:	f362 0341 	bfi	r3, r2, #1, #1
 8000c7a:	713b      	strb	r3, [r7, #4]
	IRQ.ERRI = ((SPI2->SR & (1<<4)) >> 4);
 8000c7c:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <SPI2_IRQHandler+0x54>)
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	091b      	lsrs	r3, r3, #4
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	793b      	ldrb	r3, [r7, #4]
 8000c8a:	f362 0382 	bfi	r3, r2, #2, #1
 8000c8e:	713b      	strb	r3, [r7, #4]

	G_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack(IRQ);
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <SPI2_IRQHandler+0x58>)
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	695b      	ldr	r3, [r3, #20]
 8000c96:	7938      	ldrb	r0, [r7, #4]
 8000c98:	4798      	blx	r3
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40003800 	.word	0x40003800
 8000ca8:	2000005c 	.word	0x2000005c

08000cac <MCAL_UART_Init>:
 * @param [in] 		- UART_Config: All UART configuration
 * @retval 			- none
 * Note				- support for now Asynchronous mode & clock 8 MHz
 */
void MCAL_UART_Init(USART_t* USARTx, USART_Config_t* UART_Config)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
	uint32_t pclk, BRR;

	/* 1. Enable the clock for given USART peripheral */
	if(USARTx == USART1)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4a59      	ldr	r2, [pc, #356]	; (8000e20 <MCAL_UART_Init+0x174>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d109      	bne.n	8000cd2 <MCAL_UART_Init+0x26>
	{
		RCC_USART1_CLK_EN();
 8000cbe:	4b59      	ldr	r3, [pc, #356]	; (8000e24 <MCAL_UART_Init+0x178>)
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	4a58      	ldr	r2, [pc, #352]	; (8000e24 <MCAL_UART_Init+0x178>)
 8000cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc8:	6193      	str	r3, [r2, #24]
		Global_USART_Config[0] = UART_Config;
 8000cca:	4a57      	ldr	r2, [pc, #348]	; (8000e28 <MCAL_UART_Init+0x17c>)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	6013      	str	r3, [r2, #0]
 8000cd0:	e01a      	b.n	8000d08 <MCAL_UART_Init+0x5c>
	}
	else if(USARTx == USART2)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a55      	ldr	r2, [pc, #340]	; (8000e2c <MCAL_UART_Init+0x180>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d109      	bne.n	8000cee <MCAL_UART_Init+0x42>
	{
		RCC_USART2_CLK_EN();
 8000cda:	4b52      	ldr	r3, [pc, #328]	; (8000e24 <MCAL_UART_Init+0x178>)
 8000cdc:	69db      	ldr	r3, [r3, #28]
 8000cde:	4a51      	ldr	r2, [pc, #324]	; (8000e24 <MCAL_UART_Init+0x178>)
 8000ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce4:	61d3      	str	r3, [r2, #28]
		Global_USART_Config[1] = UART_Config;
 8000ce6:	4a50      	ldr	r2, [pc, #320]	; (8000e28 <MCAL_UART_Init+0x17c>)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	6053      	str	r3, [r2, #4]
 8000cec:	e00c      	b.n	8000d08 <MCAL_UART_Init+0x5c>
	}
	else if(USARTx == USART3)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a4f      	ldr	r2, [pc, #316]	; (8000e30 <MCAL_UART_Init+0x184>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d108      	bne.n	8000d08 <MCAL_UART_Init+0x5c>
	{
		RCC_USART3_CLK_EN();
 8000cf6:	4b4b      	ldr	r3, [pc, #300]	; (8000e24 <MCAL_UART_Init+0x178>)
 8000cf8:	69db      	ldr	r3, [r3, #28]
 8000cfa:	4a4a      	ldr	r2, [pc, #296]	; (8000e24 <MCAL_UART_Init+0x178>)
 8000cfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d00:	61d3      	str	r3, [r2, #28]
		Global_USART_Config[2] = UART_Config;
 8000d02:	4a49      	ldr	r2, [pc, #292]	; (8000e28 <MCAL_UART_Init+0x17c>)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	6093      	str	r3, [r2, #8]
	}
	/* 2. Enable USART Module */
	USARTx->CR1 |= 1<<13;							// bit 13 UE: USART enable
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	60da      	str	r2, [r3, #12]

	/* 3. Enable USART TX/RX engines according to the USART_Mode configuration item */
	USARTx->CR1 |= UART_Config->USART_Mode; 		// USART_CR1 bit 3 TE: transmitter enable & bit 2 RE: receiver enable
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	683a      	ldr	r2, [r7, #0]
 8000d1a:	8812      	ldrh	r2, [r2, #0]
 8000d1c:	431a      	orrs	r2, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	60da      	str	r2, [r3, #12]

	/* 4. Pay-load width */
	USARTx->CR1 |= UART_Config->Payload_Length;		// USARTx->CR1 bit 12 M: word length
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	683a      	ldr	r2, [r7, #0]
 8000d28:	8912      	ldrh	r2, [r2, #8]
 8000d2a:	431a      	orrs	r2, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	60da      	str	r2, [r3, #12]

	/* 5. configuration of parity control bit field */
	USARTx->CR1 |= UART_Config->Parity;				// USARTx->CR1 bit 10 PCE: Parity Control enable bit 9 PS: Parity selection
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	683a      	ldr	r2, [r7, #0]
 8000d36:	8952      	ldrh	r2, [r2, #10]
 8000d38:	431a      	orrs	r2, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	60da      	str	r2, [r3, #12]

	/* 6. configuration the no. of stop bits */
	USARTx->CR2 |= UART_Config->StopBits;			// USART_CR2 bits 13:12 STOP: stop bits
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	691b      	ldr	r3, [r3, #16]
 8000d42:	683a      	ldr	r2, [r7, #0]
 8000d44:	8992      	ldrh	r2, [r2, #12]
 8000d46:	431a      	orrs	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	611a      	str	r2, [r3, #16]


	/* 7. USART HW Flow Control */
	USARTx->CR3 |= UART_Config->HwFlowCtl;			// USART_CR3 bit 9 CTSE: CTS enable bit 8 RTSE: RTS enable
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	695b      	ldr	r3, [r3, #20]
 8000d50:	683a      	ldr	r2, [r7, #0]
 8000d52:	89d2      	ldrh	r2, [r2, #14]
 8000d54:	431a      	orrs	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	615a      	str	r2, [r3, #20]


	/* 8. configuration of BRR (baud-rate register) */
	if (USARTx == USART1)							// PCLK2 for USART1
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a30      	ldr	r2, [pc, #192]	; (8000e20 <MCAL_UART_Init+0x174>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d103      	bne.n	8000d6a <MCAL_UART_Init+0xbe>

	{
		pclk = MCAL_RCC_Get_PCLK2Freq();
 8000d62:	f7ff fd41 	bl	80007e8 <MCAL_RCC_Get_PCLK2Freq>
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	e002      	b.n	8000d70 <MCAL_UART_Init+0xc4>
	}
	else											// PCLK1 for USART2, 3

	{
		pclk = MCAL_RCC_Get_PCLK1Freq();
 8000d6a:	f7ff fd29 	bl	80007c0 <MCAL_RCC_Get_PCLK1Freq>
 8000d6e:	60f8      	str	r0, [r7, #12]
	}

	BRR = UART_BRR_Register(pclk, UART_Config->BaudRate);
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	011b      	lsls	r3, r3, #4
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7c:	0119      	lsls	r1, r3, #4
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	4613      	mov	r3, r2
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	4413      	add	r3, r2
 8000d86:	009a      	lsls	r2, r3, #2
 8000d88:	441a      	add	r2, r3
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	011b      	lsls	r3, r3, #4
 8000d9a:	68f8      	ldr	r0, [r7, #12]
 8000d9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000da0:	2064      	movs	r0, #100	; 0x64
 8000da2:	fb00 f303 	mul.w	r3, r0, r3
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	011b      	lsls	r3, r3, #4
 8000daa:	4a22      	ldr	r2, [pc, #136]	; (8000e34 <MCAL_UART_Init+0x188>)
 8000dac:	fba2 2303 	umull	r2, r3, r2, r3
 8000db0:	095b      	lsrs	r3, r3, #5
 8000db2:	f003 030f 	and.w	r3, r3, #15
 8000db6:	430b      	orrs	r3, r1
 8000db8:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	68ba      	ldr	r2, [r7, #8]
 8000dbe:	609a      	str	r2, [r3, #8]

	/* 9. ENABLE / DISABLE Interrupt */
	if (UART_Config->IRQ_Enable != UART_IRQ_Enable_NONE)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	8a1b      	ldrh	r3, [r3, #16]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d026      	beq.n	8000e16 <MCAL_UART_Init+0x16a>
	{
		USARTx->CR1 |= (UART_Config->IRQ_Enable);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	683a      	ldr	r2, [r7, #0]
 8000dce:	8a12      	ldrh	r2, [r2, #16]
 8000dd0:	431a      	orrs	r2, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	60da      	str	r2, [r3, #12]

		/* Enable NVIC for USARTx IRQ */
		if (USARTx == USART1)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a11      	ldr	r2, [pc, #68]	; (8000e20 <MCAL_UART_Init+0x174>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d106      	bne.n	8000dec <MCAL_UART_Init+0x140>
			NVIC_IRQ37_USART1_EN();
 8000dde:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <MCAL_UART_Init+0x18c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a15      	ldr	r2, [pc, #84]	; (8000e38 <MCAL_UART_Init+0x18c>)
 8000de4:	f043 0320 	orr.w	r3, r3, #32
 8000de8:	6013      	str	r3, [r2, #0]
			NVIC_IRQ38_USART2_EN();

		else if (USARTx == USART3)
			NVIC_IRQ39_USART3_EN();
	}
}
 8000dea:	e014      	b.n	8000e16 <MCAL_UART_Init+0x16a>
		else if (USARTx == USART2)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a0f      	ldr	r2, [pc, #60]	; (8000e2c <MCAL_UART_Init+0x180>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d106      	bne.n	8000e02 <MCAL_UART_Init+0x156>
			NVIC_IRQ38_USART2_EN();
 8000df4:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <MCAL_UART_Init+0x18c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a0f      	ldr	r2, [pc, #60]	; (8000e38 <MCAL_UART_Init+0x18c>)
 8000dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dfe:	6013      	str	r3, [r2, #0]
}
 8000e00:	e009      	b.n	8000e16 <MCAL_UART_Init+0x16a>
		else if (USARTx == USART3)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a0a      	ldr	r2, [pc, #40]	; (8000e30 <MCAL_UART_Init+0x184>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d105      	bne.n	8000e16 <MCAL_UART_Init+0x16a>
			NVIC_IRQ39_USART3_EN();
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <MCAL_UART_Init+0x18c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <MCAL_UART_Init+0x18c>)
 8000e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e14:	6013      	str	r3, [r2, #0]
}
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40013800 	.word	0x40013800
 8000e24:	40021000 	.word	0x40021000
 8000e28:	20000094 	.word	0x20000094
 8000e2c:	40004400 	.word	0x40004400
 8000e30:	40004800 	.word	0x40004800
 8000e34:	51eb851f 	.word	0x51eb851f
 8000e38:	e000e104 	.word	0xe000e104

08000e3c <MCAL_UART_SendData>:
	4. Select DMA enable (DMAT) in USART_CR3 if Multi buffer Communication is to takeplace. Configure the DMA register as explained in multibuffer communication.
	5. Select the desired baud rate using the USART_BRR register.
	6. Set the TE bit in USART_CR1 to send an idle frame as first transmission.
 * */
void MCAL_UART_SendData(USART_t* USARTx, uint16_t* pTxBuffer, enum Polling_mechanism PollingEn)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	4613      	mov	r3, r2
 8000e48:	71fb      	strb	r3, [r7, #7]
	//7. Write the data to send in the USART_DR register (this clears the TXE bit). Repeat this	for each data to be transmitted in case of single buffer.
		//8. After writing the last data into the USART_DR register, wait until TC=1. This indicates
		//that the transmission of the last frame is complete. This is required for instance when
		//the USART is disabled or enters the Halt mode to avoid corrupting the last
		//transmission
	if (PollingEn == USART_enable)
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d106      	bne.n	8000e5e <MCAL_UART_SendData+0x22>
		 * The TXE bit is set by hardware and it indicates:
		 * The data has been moved from TDR to the shift register and the data transmission has started.
		 * The TDR register is empty.
		 * The next data can be written in the USART_DR register without overwriting the previous data.
		 */
		while (!(USARTx->SR & 1<<7));
 8000e50:	bf00      	nop
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d0f9      	beq.n	8000e52 <MCAL_UART_SendData+0x16>
	/* When Transmitting with the parity enabled (PCE bit set to 1 in the USART_CR1 register),
	 * the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect
	 * because it is replaced by the parity.
	 * When receiving with the parity enabled, the value read in the MSB bit is the received parity bit.
	 */
	if (USARTx == USART1)
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	4a2b      	ldr	r2, [pc, #172]	; (8000f10 <MCAL_UART_SendData+0xd4>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d117      	bne.n	8000e96 <MCAL_UART_SendData+0x5a>
	{
		if (Global_USART_Config[0]->Payload_Length == UART_Payload_Length_8B)
 8000e66:	4b2b      	ldr	r3, [pc, #172]	; (8000f14 <MCAL_UART_SendData+0xd8>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	891b      	ldrh	r3, [r3, #8]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d105      	bne.n	8000e7c <MCAL_UART_SendData+0x40>
		{
			USARTx->DR = (*pTxBuffer) & (uint8_t)0xFF ;
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	881b      	ldrh	r3, [r3, #0]
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	605a      	str	r2, [r3, #4]
		else if (Global_USART_Config[2]->Payload_Length == UART_Payload_Length_9B)
		{
			USARTx->DR = (*pTxBuffer) & (uint16_t)0x1FF ;
		}
	}
}
 8000e7a:	e043      	b.n	8000f04 <MCAL_UART_SendData+0xc8>
		else if (Global_USART_Config[0]->Payload_Length == UART_Payload_Length_9B)
 8000e7c:	4b25      	ldr	r3, [pc, #148]	; (8000f14 <MCAL_UART_SendData+0xd8>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	891b      	ldrh	r3, [r3, #8]
 8000e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e86:	d13d      	bne.n	8000f04 <MCAL_UART_SendData+0xc8>
			USARTx->DR = (*pTxBuffer) & (uint16_t)0x1FF ;
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	605a      	str	r2, [r3, #4]
}
 8000e94:	e036      	b.n	8000f04 <MCAL_UART_SendData+0xc8>
	else if (USARTx == USART2)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	4a1f      	ldr	r2, [pc, #124]	; (8000f18 <MCAL_UART_SendData+0xdc>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d117      	bne.n	8000ece <MCAL_UART_SendData+0x92>
		if (Global_USART_Config[1]->Payload_Length == UART_Payload_Length_8B)
 8000e9e:	4b1d      	ldr	r3, [pc, #116]	; (8000f14 <MCAL_UART_SendData+0xd8>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	891b      	ldrh	r3, [r3, #8]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d105      	bne.n	8000eb4 <MCAL_UART_SendData+0x78>
			USARTx->DR = (*pTxBuffer) & (uint8_t)0xFF ;
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	881b      	ldrh	r3, [r3, #0]
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	605a      	str	r2, [r3, #4]
}
 8000eb2:	e027      	b.n	8000f04 <MCAL_UART_SendData+0xc8>
		else if (Global_USART_Config[1]->Payload_Length == UART_Payload_Length_9B)
 8000eb4:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <MCAL_UART_SendData+0xd8>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	891b      	ldrh	r3, [r3, #8]
 8000eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ebe:	d121      	bne.n	8000f04 <MCAL_UART_SendData+0xc8>
			USARTx->DR = (*pTxBuffer) & (uint16_t)0x1FF ;
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	605a      	str	r2, [r3, #4]
}
 8000ecc:	e01a      	b.n	8000f04 <MCAL_UART_SendData+0xc8>
	else if (USARTx == USART3)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <MCAL_UART_SendData+0xe0>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d116      	bne.n	8000f04 <MCAL_UART_SendData+0xc8>
		if (Global_USART_Config[2]->Payload_Length == UART_Payload_Length_8B)
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <MCAL_UART_SendData+0xd8>)
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	891b      	ldrh	r3, [r3, #8]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d105      	bne.n	8000eec <MCAL_UART_SendData+0xb0>
			USARTx->DR = (*pTxBuffer) & (uint8_t)0xFF ;
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	605a      	str	r2, [r3, #4]
}
 8000eea:	e00b      	b.n	8000f04 <MCAL_UART_SendData+0xc8>
		else if (Global_USART_Config[2]->Payload_Length == UART_Payload_Length_9B)
 8000eec:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <MCAL_UART_SendData+0xd8>)
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	891b      	ldrh	r3, [r3, #8]
 8000ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ef6:	d105      	bne.n	8000f04 <MCAL_UART_SendData+0xc8>
			USARTx->DR = (*pTxBuffer) & (uint16_t)0x1FF ;
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	605a      	str	r2, [r3, #4]
}
 8000f04:	bf00      	nop
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	40013800 	.word	0x40013800
 8000f14:	20000094 	.word	0x20000094
 8000f18:	40004400 	.word	0x40004400
 8000f1c:	40004800 	.word	0x40004800

08000f20 <MCAL_UART_GPIO_Set_Pins>:
 * @param[in]		- USARTx: where x can be (1..3 depending on device used)
 * @retval 			- None
 * @Notes			- Should enable the corresponding ALT & GPIO in RCC clock . Also called after MCAL_UART_Init()
 */
void MCAL_UART_GPIO_Set_Pins(USART_t* USARTx)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	GPIO_PIN_CONFIG_T Pin_Config;

	if (USARTx == USART1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a73      	ldr	r2, [pc, #460]	; (80010f8 <MCAL_UART_GPIO_Set_Pins+0x1d8>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d149      	bne.n	8000fc4 <MCAL_UART_GPIO_Set_Pins+0xa4>
	{
		// PA9 Tx
		Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_9;
 8000f30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f34:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000f36:	2306      	movs	r3, #6
 8000f38:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8000f3e:	f107 030c 	add.w	r3, r7, #12
 8000f42:	4619      	mov	r1, r3
 8000f44:	486d      	ldr	r0, [pc, #436]	; (80010fc <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 8000f46:	f7ff fb8b 	bl	8000660 <MCAL_GPIO_Init>

		// PA10 Rx
		Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_10;
 8000f4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f4e:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000f50:	2301      	movs	r3, #1
 8000f52:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4868      	ldr	r0, [pc, #416]	; (80010fc <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 8000f5c:	f7ff fb80 	bl	8000660 <MCAL_GPIO_Init>

		if (Global_USART_Config[0]->HwFlowCtl == UART_HwFlowCtl_CTS || Global_USART_Config[0]->HwFlowCtl == UART_HwFlowCtl_RTS_CTS)
 8000f60:	4b67      	ldr	r3, [pc, #412]	; (8001100 <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	89db      	ldrh	r3, [r3, #14]
 8000f66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f6a:	d005      	beq.n	8000f78 <MCAL_UART_GPIO_Set_Pins+0x58>
 8000f6c:	4b64      	ldr	r3, [pc, #400]	; (8001100 <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	89db      	ldrh	r3, [r3, #14]
 8000f72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000f76:	d10a      	bne.n	8000f8e <MCAL_UART_GPIO_Set_Pins+0x6e>
		{
			// PA11 CTS
			Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_11;
 8000f78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f7c:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8000f82:	f107 030c 	add.w	r3, r7, #12
 8000f86:	4619      	mov	r1, r3
 8000f88:	485c      	ldr	r0, [pc, #368]	; (80010fc <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 8000f8a:	f7ff fb69 	bl	8000660 <MCAL_GPIO_Init>
		}

		if (Global_USART_Config[0]->HwFlowCtl == UART_HwFlowCtl_RTS || Global_USART_Config[0]->HwFlowCtl == UART_HwFlowCtl_RTS_CTS)
 8000f8e:	4b5c      	ldr	r3, [pc, #368]	; (8001100 <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	89db      	ldrh	r3, [r3, #14]
 8000f94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f98:	d006      	beq.n	8000fa8 <MCAL_UART_GPIO_Set_Pins+0x88>
 8000f9a:	4b59      	ldr	r3, [pc, #356]	; (8001100 <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	89db      	ldrh	r3, [r3, #14]
 8000fa0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000fa4:	f040 80a3 	bne.w	80010ee <MCAL_UART_GPIO_Set_Pins+0x1ce>
		{
			// PA12 RTS
			Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_12;
 8000fa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fac:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000fae:	2306      	movs	r3, #6
 8000fb0:	73bb      	strb	r3, [r7, #14]
			Pin_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	4619      	mov	r1, r3
 8000fbc:	484f      	ldr	r0, [pc, #316]	; (80010fc <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 8000fbe:	f7ff fb4f 	bl	8000660 <MCAL_GPIO_Init>
			Pin_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
			Pin_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
			MCAL_GPIO_Init(GPIOB, &Pin_Config);
		}
	}
}
 8000fc2:	e094      	b.n	80010ee <MCAL_UART_GPIO_Set_Pins+0x1ce>
	else if (USARTx == USART2)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a4f      	ldr	r2, [pc, #316]	; (8001104 <MCAL_UART_GPIO_Set_Pins+0x1e4>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d144      	bne.n	8001056 <MCAL_UART_GPIO_Set_Pins+0x136>
		Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_2;
 8000fcc:	2304      	movs	r3, #4
 8000fce:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000fd0:	2306      	movs	r3, #6
 8000fd2:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4847      	ldr	r0, [pc, #284]	; (80010fc <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 8000fe0:	f7ff fb3e 	bl	8000660 <MCAL_GPIO_Init>
		Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_3;
 8000fe4:	2308      	movs	r3, #8
 8000fe6:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4842      	ldr	r0, [pc, #264]	; (80010fc <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 8000ff4:	f7ff fb34 	bl	8000660 <MCAL_GPIO_Init>
		if (Global_USART_Config[1]->HwFlowCtl == UART_HwFlowCtl_CTS || Global_USART_Config[1]->HwFlowCtl == UART_HwFlowCtl_RTS_CTS)
 8000ff8:	4b41      	ldr	r3, [pc, #260]	; (8001100 <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	89db      	ldrh	r3, [r3, #14]
 8000ffe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001002:	d005      	beq.n	8001010 <MCAL_UART_GPIO_Set_Pins+0xf0>
 8001004:	4b3e      	ldr	r3, [pc, #248]	; (8001100 <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	89db      	ldrh	r3, [r3, #14]
 800100a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800100e:	d109      	bne.n	8001024 <MCAL_UART_GPIO_Set_Pins+0x104>
			Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_0;
 8001010:	2301      	movs	r3, #1
 8001012:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8001014:	2301      	movs	r3, #1
 8001016:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	4619      	mov	r1, r3
 800101e:	4837      	ldr	r0, [pc, #220]	; (80010fc <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 8001020:	f7ff fb1e 	bl	8000660 <MCAL_GPIO_Init>
		if (Global_USART_Config[1]->HwFlowCtl == UART_HwFlowCtl_RTS || Global_USART_Config[1]->HwFlowCtl == UART_HwFlowCtl_RTS_CTS)
 8001024:	4b36      	ldr	r3, [pc, #216]	; (8001100 <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	89db      	ldrh	r3, [r3, #14]
 800102a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800102e:	d005      	beq.n	800103c <MCAL_UART_GPIO_Set_Pins+0x11c>
 8001030:	4b33      	ldr	r3, [pc, #204]	; (8001100 <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	89db      	ldrh	r3, [r3, #14]
 8001036:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800103a:	d158      	bne.n	80010ee <MCAL_UART_GPIO_Set_Pins+0x1ce>
			Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_1;
 800103c:	2302      	movs	r3, #2
 800103e:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001040:	2306      	movs	r3, #6
 8001042:	73bb      	strb	r3, [r7, #14]
			Pin_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 8001044:	2301      	movs	r3, #1
 8001046:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	4619      	mov	r1, r3
 800104e:	482b      	ldr	r0, [pc, #172]	; (80010fc <MCAL_UART_GPIO_Set_Pins+0x1dc>)
 8001050:	f7ff fb06 	bl	8000660 <MCAL_GPIO_Init>
}
 8001054:	e04b      	b.n	80010ee <MCAL_UART_GPIO_Set_Pins+0x1ce>
	else if (USARTx == USART3)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a2b      	ldr	r2, [pc, #172]	; (8001108 <MCAL_UART_GPIO_Set_Pins+0x1e8>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d147      	bne.n	80010ee <MCAL_UART_GPIO_Set_Pins+0x1ce>
		Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_10;
 800105e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001062:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8001064:	2306      	movs	r3, #6
 8001066:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 8001068:	2301      	movs	r3, #1
 800106a:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &Pin_Config);
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	4619      	mov	r1, r3
 8001072:	4826      	ldr	r0, [pc, #152]	; (800110c <MCAL_UART_GPIO_Set_Pins+0x1ec>)
 8001074:	f7ff faf4 	bl	8000660 <MCAL_GPIO_Init>
		Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_11;
 8001078:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800107c:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 800107e:	2301      	movs	r3, #1
 8001080:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &Pin_Config);
 8001082:	f107 030c 	add.w	r3, r7, #12
 8001086:	4619      	mov	r1, r3
 8001088:	4820      	ldr	r0, [pc, #128]	; (800110c <MCAL_UART_GPIO_Set_Pins+0x1ec>)
 800108a:	f7ff fae9 	bl	8000660 <MCAL_GPIO_Init>
		if (Global_USART_Config[2]->HwFlowCtl == UART_HwFlowCtl_CTS || Global_USART_Config[2]->HwFlowCtl == UART_HwFlowCtl_RTS_CTS)
 800108e:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	89db      	ldrh	r3, [r3, #14]
 8001094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001098:	d005      	beq.n	80010a6 <MCAL_UART_GPIO_Set_Pins+0x186>
 800109a:	4b19      	ldr	r3, [pc, #100]	; (8001100 <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	89db      	ldrh	r3, [r3, #14]
 80010a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80010a4:	d10a      	bne.n	80010bc <MCAL_UART_GPIO_Set_Pins+0x19c>
			Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_13;
 80010a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010aa:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80010ac:	2301      	movs	r3, #1
 80010ae:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &Pin_Config);
 80010b0:	f107 030c 	add.w	r3, r7, #12
 80010b4:	4619      	mov	r1, r3
 80010b6:	4815      	ldr	r0, [pc, #84]	; (800110c <MCAL_UART_GPIO_Set_Pins+0x1ec>)
 80010b8:	f7ff fad2 	bl	8000660 <MCAL_GPIO_Init>
		if (Global_USART_Config[2]->HwFlowCtl == UART_HwFlowCtl_RTS || Global_USART_Config[2]->HwFlowCtl == UART_HwFlowCtl_RTS_CTS)
 80010bc:	4b10      	ldr	r3, [pc, #64]	; (8001100 <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	89db      	ldrh	r3, [r3, #14]
 80010c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010c6:	d005      	beq.n	80010d4 <MCAL_UART_GPIO_Set_Pins+0x1b4>
 80010c8:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <MCAL_UART_GPIO_Set_Pins+0x1e0>)
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	89db      	ldrh	r3, [r3, #14]
 80010ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80010d2:	d10c      	bne.n	80010ee <MCAL_UART_GPIO_Set_Pins+0x1ce>
			Pin_Config.GPIO_PIN_NUMBER = GPIO_PIN_14;
 80010d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010d8:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80010da:	2306      	movs	r3, #6
 80010dc:	73bb      	strb	r3, [r7, #14]
			Pin_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHz;
 80010de:	2301      	movs	r3, #1
 80010e0:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &Pin_Config);
 80010e2:	f107 030c 	add.w	r3, r7, #12
 80010e6:	4619      	mov	r1, r3
 80010e8:	4808      	ldr	r0, [pc, #32]	; (800110c <MCAL_UART_GPIO_Set_Pins+0x1ec>)
 80010ea:	f7ff fab9 	bl	8000660 <MCAL_GPIO_Init>
}
 80010ee:	bf00      	nop
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40013800 	.word	0x40013800
 80010fc:	40010800 	.word	0x40010800
 8001100:	20000094 	.word	0x20000094
 8001104:	40004400 	.word	0x40004400
 8001108:	40004800 	.word	0x40004800
 800110c:	40010c00 	.word	0x40010c00

08001110 <USART1_IRQHandler>:

void USART1_IRQHandler (void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
	Global_USART_Config[0]->P_IRQ_CallBack();
 8001114:	4b02      	ldr	r3, [pc, #8]	; (8001120 <USART1_IRQHandler+0x10>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	4798      	blx	r3
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000094 	.word	0x20000094

08001124 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
	Global_USART_Config[1]->P_IRQ_CallBack();
 8001128:	4b02      	ldr	r3, [pc, #8]	; (8001134 <USART2_IRQHandler+0x10>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	4798      	blx	r3
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000094 	.word	0x20000094

08001138 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	Global_USART_Config[2]->P_IRQ_CallBack();
 800113c:	4b02      	ldr	r3, [pc, #8]	; (8001148 <USART3_IRQHandler+0x10>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	4798      	blx	r3
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000094 	.word	0x20000094

0800114c <__libc_init_array>:
 800114c:	b570      	push	{r4, r5, r6, lr}
 800114e:	2600      	movs	r6, #0
 8001150:	4d0c      	ldr	r5, [pc, #48]	; (8001184 <__libc_init_array+0x38>)
 8001152:	4c0d      	ldr	r4, [pc, #52]	; (8001188 <__libc_init_array+0x3c>)
 8001154:	1b64      	subs	r4, r4, r5
 8001156:	10a4      	asrs	r4, r4, #2
 8001158:	42a6      	cmp	r6, r4
 800115a:	d109      	bne.n	8001170 <__libc_init_array+0x24>
 800115c:	f000 f81a 	bl	8001194 <_init>
 8001160:	2600      	movs	r6, #0
 8001162:	4d0a      	ldr	r5, [pc, #40]	; (800118c <__libc_init_array+0x40>)
 8001164:	4c0a      	ldr	r4, [pc, #40]	; (8001190 <__libc_init_array+0x44>)
 8001166:	1b64      	subs	r4, r4, r5
 8001168:	10a4      	asrs	r4, r4, #2
 800116a:	42a6      	cmp	r6, r4
 800116c:	d105      	bne.n	800117a <__libc_init_array+0x2e>
 800116e:	bd70      	pop	{r4, r5, r6, pc}
 8001170:	f855 3b04 	ldr.w	r3, [r5], #4
 8001174:	4798      	blx	r3
 8001176:	3601      	adds	r6, #1
 8001178:	e7ee      	b.n	8001158 <__libc_init_array+0xc>
 800117a:	f855 3b04 	ldr.w	r3, [r5], #4
 800117e:	4798      	blx	r3
 8001180:	3601      	adds	r6, #1
 8001182:	e7f2      	b.n	800116a <__libc_init_array+0x1e>
 8001184:	080011c4 	.word	0x080011c4
 8001188:	080011c4 	.word	0x080011c4
 800118c:	080011c4 	.word	0x080011c4
 8001190:	080011c8 	.word	0x080011c8

08001194 <_init>:
 8001194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001196:	bf00      	nop
 8001198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800119a:	bc08      	pop	{r3}
 800119c:	469e      	mov	lr, r3
 800119e:	4770      	bx	lr

080011a0 <_fini>:
 80011a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011a2:	bf00      	nop
 80011a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011a6:	bc08      	pop	{r3}
 80011a8:	469e      	mov	lr, r3
 80011aa:	4770      	bx	lr
