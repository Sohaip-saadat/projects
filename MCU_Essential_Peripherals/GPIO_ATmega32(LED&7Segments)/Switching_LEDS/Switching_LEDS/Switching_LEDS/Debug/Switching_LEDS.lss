
Switching_LEDS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000106  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000017a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000017a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000017a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000061e  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000583  00000000  00000000  00000826  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000285  00000000  00000000  00000da9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00001030  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000032c  00000000  00000000  00001054  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000048  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  000013c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 81 00 	jmp	0x102	; 0x102 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
uint8_t button;

int main(void)
{
	//PORTA pins ====> Output
	DDRA = 0b11111111;
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	8a bb       	out	0x1a, r24	; 26
	//PORTC===>pin0====>input
	CLEAR_BIT(DDRC,0);
  80:	84 b3       	in	r24, 0x14	; 20
  82:	8e 7f       	andi	r24, 0xFE	; 254
  84:	84 bb       	out	0x14, r24	; 20
	SET_BIT(PORTC,0);
  86:	85 b3       	in	r24, 0x15	; 21
  88:	81 60       	ori	r24, 0x01	; 1
  8a:	85 bb       	out	0x15, r24	; 21

	/* Replace with your application code */
	while (1)
	{
		if(READ_BIT(PINC,0)==0){
  8c:	98 9b       	sbis	0x13, 0	; 19
  8e:	20 c0       	rjmp	.+64     	; 0xd0 <main+0x54>
  90:	22 c0       	rjmp	.+68     	; 0xd6 <main+0x5a>
			while(READ_BIT(PINC,0)==0){
				for(led=0;led<=7;led++){
  92:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <led>
  96:	18 c0       	rjmp	.+48     	; 0xc8 <main+0x4c>
					SET_BIT(PORTA,led);
  98:	3b b3       	in	r19, 0x1b	; 27
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <main+0x28>
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
  a4:	2a 95       	dec	r18
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <main+0x24>
  a8:	83 2b       	or	r24, r19
  aa:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	2f e3       	ldi	r18, 0x3F	; 63
  ae:	8d e0       	ldi	r24, 0x0D	; 13
  b0:	93 e0       	ldi	r25, 0x03	; 3
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x36>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x40>
  bc:	00 00       	nop
	/* Replace with your application code */
	while (1)
	{
		if(READ_BIT(PINC,0)==0){
			while(READ_BIT(PINC,0)==0){
				for(led=0;led<=7;led++){
  be:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <led>
  c2:	8f 5f       	subi	r24, 0xFF	; 255
  c4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <led>
  c8:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <led>
  cc:	28 30       	cpi	r18, 0x08	; 8
  ce:	20 f3       	brcs	.-56     	; 0x98 <main+0x1c>

	/* Replace with your application code */
	while (1)
	{
		if(READ_BIT(PINC,0)==0){
			while(READ_BIT(PINC,0)==0){
  d0:	98 9b       	sbis	0x13, 0	; 19
  d2:	df cf       	rjmp	.-66     	; 0x92 <main+0x16>
  d4:	db cf       	rjmp	.-74     	; 0x8c <main+0x10>
					_delay_ms(1000);
				}				
			}
		}
		else{
				for(led=7;led>=0;led--){
  d6:	87 e0       	ldi	r24, 0x07	; 7
  d8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <led>
					CLEAR_BIT(PORTA,led);
  dc:	2b b3       	in	r18, 0x1b	; 27
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	00 90 61 00 	lds	r0, 0x0061	; 0x800061 <led>
  e6:	02 c0       	rjmp	.+4      	; 0xec <main+0x70>
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	0a 94       	dec	r0
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <main+0x6c>
  f0:	80 95       	com	r24
  f2:	82 23       	and	r24, r18
  f4:	8b bb       	out	0x1b, r24	; 27
					_delay_ms(1000);
				}				
			}
		}
		else{
				for(led=7;led>=0;led--){
  f6:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <led>
  fa:	81 50       	subi	r24, 0x01	; 1
  fc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <led>
 100:	ed cf       	rjmp	.-38     	; 0xdc <main+0x60>

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>
